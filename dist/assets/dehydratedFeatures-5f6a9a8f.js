import{bQ as l,bR as o}from"./index-c2b82012.js";class a{constructor(e,n,i){this.uid=e,this.geometry=n,this.attributes=i,this.visible=!0,this.objectId=null,this.centroid=null}}class u{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function c(t){if(t==null)return 0;switch(t.type){case"point":return l+10+8+24;case"polyline":case"polygon":{let e=0;const n=2+(t.hasZ?1:0)+(t.hasM?1:0),i=t.type==="polyline"?t.paths:t.rings;for(const s of i)e+=s.length;return l+8*e*n+64+128*e+34+32*(i.length+1)}case"multipoint":{const e=2+(t.hasZ?1:0)+(t.hasM?1:0),n=t.points.length;return l+8*n*e+64+128*n+34+32}case"extent":return l+10+64+34;case"mesh":{const e=t.vertexAttributes;return l+o(e.position,e.normal,e.uv,e.tangent)}default:return l}}function f(t,e,n,i){if(e!=null&&e.size&&n!=null&&t)for(const s in t){if(!e.has(s))continue;const r=t[s];typeof r=="string"&&r.length>n&&(i(s),t[s]="")}}export{f as R,c as Z,u as d,a as g};
