import{dE as m,s,aL as i}from"./index-09dc31eb.js";import{p as n}from"./MeshVertexAttributes-ccd31848.js";import{M as a}from"./vertexSpaceConversion-3f19da98.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-3f33f300.js";import"./computeTranslationToOriginAndRotation-56d318b8.js";import"./projectPointToVector-2d437ab5.js";import"./meshVertexSpaceUtils-37024b50.js";import"./MeshLocalVertexSpace-e522e204.js";import"./vec3-0acb0c2f.js";import"./projection-55778fab.js";import"./DoubleArray-273c51d9.js";import"./BufferView-29927bc1.js";import"./vec4-64c9eb58.js";async function S(t,r,p){await Promise.resolve(),m(p);const o=a(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
