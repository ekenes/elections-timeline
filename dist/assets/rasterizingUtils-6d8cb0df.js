import{o as v}from"./floatRGBA-2ce8f0e0.js";import{gD as b,$ as k,gE as A,gF as R}from"./index-c2b82012.js";const z=15.5,S=4,U=64,P=1024,q=()=>k.getLogger("esri.symbols.cim.rasterizingUtils"),G=32,L=t=>t==="vertical"||t==="horizontal"||t==="cross"||t==="esriSFSCross"||t==="esriSFSVertical"||t==="esriSFSHorizontal";function W(t,l,n){const s=l.style,r=A(Math.ceil(n)),o=L(s)?8*r:16*r,e=2*r;t.width=o,t.height=o;const a=t.getContext("2d");a.strokeStyle="#ffffff",a.lineWidth=r,a.beginPath(),s!=="vertical"&&s!=="cross"&&s!=="esriSFSCross"&&s!=="esriSFSVertical"||(a.moveTo(o/2,-e),a.lineTo(o/2,o+e)),s!=="horizontal"&&s!=="cross"&&s!=="esriSFSCross"&&s!=="esriSFSHorizontal"||(a.moveTo(-e,o/2),a.lineTo(o+e,o/2)),s!=="backward-diagonal"&&s!=="diagonal-cross"&&s!=="esriSFSDiagonalCross"&&s!=="esriSFSBackwardDiagonal"||(a.moveTo(-e,-e),a.lineTo(o+e,o+e),a.moveTo(o-e,-e),a.lineTo(o+e,e),a.moveTo(-e,o-e),a.lineTo(e,o+e)),s!=="forward-diagonal"&&s!=="diagonal-cross"&&s!=="esriSFSForwardDiagonal"&&s!=="esriSFSDiagonalCross"||(a.moveTo(o+e,-e),a.lineTo(-e,o+e),a.moveTo(e,-e),a.lineTo(-e,e),a.moveTo(o+e,o-e),a.lineTo(o-e,o+e)),a.stroke();const f=a.getImageData(0,0,t.width,t.height),c=new Uint8Array(f.data);let h;for(let i=0;i<c.length;i+=4)h=c[i+3]/255,c[i]=c[i]*h,c[i+1]=c[i+1]*h,c[i+2]=c[i+2]*h;return[c,t.width,t.height,r]}function j(t){t.length%2==1&&(t=[...t,...t]);const l=t.reduce((i,g)=>i+g,0),n=Math.round(l*S),s=1,r=new Float32Array(n*s);let o=0,e=0,a=.5,f=!0;for(const i of t){for(o=e,e+=i*S;a<=e;){const g=a-.5,u=Math.min(Math.abs(a-o),Math.abs(a-e));r[g]=f?-u:u,a++}f=!f}const c=r.length,h=new Uint8Array(4*c);for(let i=0;i<c;++i){const g=r[i]/S;v(g/U*.5+.5,h,4*i)}return[h,n,s]}function J(t,l){t==null&&(t=[]);const n=l==="Butt",s=l==="Square",r=!n&&!s;t.length%2==1&&(t=[...t,...t]);const o=z,e=2*o;let a=0;for(const m of t)a+=m;const f=Math.round(a*o),c=new Float32Array(f*e),h=.5*o;let i=0,g=0,u=.5,M=!0;for(const m of t){for(i=g,g+=m*o;u<=g;){let C=.5;for(;C<e;){const $=(C-.5)*f+u-.5,d=r?(C-o)*(C-o):Math.abs(C-o);c[$]=M?n?Math.max(Math.max(i+h-u,d),Math.max(u-g+h,d)):d:r?Math.min((u-i)*(u-i)+d,(u-g)*(u-g)+d):s?Math.min(Math.max(u-i,d),Math.max(g-u,d)):Math.min(Math.max(u-i+h,d),Math.max(g+h-u,d)),C++}u++}M=!M}const T=c.length,x=new Uint8Array(4*T);for(let m=0;m<T;++m){const C=(r?Math.sqrt(c[m]):c[m])/o;v(C,x,4*m)}return[x,f,e]}function K(t,l){const{colorRamp:n,gradientType:s}=l,r=n.type==="CIMFixedColorRamp",o=l.interval||b.CIMGradientFill.interval;let e=w(n);return r&&(e=I(e,o)),s==="Discrete"||r?E(t,e,o):B(t,e)}let F;function N(t,l){const{colorRamp:n,gradientType:s}=l,r=w(n),o=n.type==="CIMFixedColorRamp";if(s==="Continuous"&&!o)return p(t,r);const e=l.interval??b.CIMGradientFill.interval;if(o)return p(t,I(r,e));const a=[];F??(F=document.createElement("canvas")),y(F,r,e,1,0);const f=F.getContext("2d").getImageData(0,0,e,1).data;for(let c=0,h=0;c<e;c++,h=4*c){const i=[f[h+0],f[h+1],f[h+2],f[h+3]];a.push({offset:c/e,color:i}),a.push({offset:(c+1)/e,color:i})}return p(t,a)}function w(t){const l=[];switch(t.type){case"CIMLinearContinuousColorRamp":{const n=t;l.push({offset:0,color:[n.fromColor[0],n.fromColor[1],n.fromColor[2],n.fromColor[3]/255]}),l.push({offset:1,color:[n.toColor[0],n.toColor[1],n.toColor[2],n.toColor[3]/255]});break}case"CIMFixedColorRamp":{const n=t,s=1/(n.colors.length-1);let r=0;for(const o of n.colors)l.push({offset:r,color:[o[0],o[1],o[2],o[3]/255]}),r+=s;break}case"CIMMultipartColorRamp":{const n=t,s=n.weights.reduce((o,e)=>o+e,0);let r=0;for(let o=0;o<n.colorRamps.length;o++){const e=n.colorRamps[o],a=n.weights[o],f=w(e);for(const c of f)l.push({offset:(r+c.offset*a)/s,color:c.color});r+=a}break}default:q().error(`Color ramp "${t.type}" currently unsupported.`)}return l}function I(t,l){const n=[],s=(t.length-1)/(l-1);for(let r=0;r<l;r++){const o=t[Math.round(r*s)].color;n.push({offset:r/l,color:o}),n.push({offset:(r+1)/l,color:o})}return n}function B(t,l){return y(t,l,G,1,R),D(t)}function E(t,l,n){return y(t,l,n,1,R),D(t)}function p(t,l,n=0){for(const{offset:s,color:r}of l)t.addColorStop(Math.min(Math.max(s,n),1-n),`rgba(${r[0]}, ${r[1]}, ${r[2]}, ${r[3]})`)}function y(t,l,n,s,r){const o=n+2*r;t.width=o,t.height=s;const e=(r+1)/o,a=t.getContext("2d",{willReadFrequently:!0});if(l.length>0){const f=a.createLinearGradient(0,0,o,s);p(f,l,e),a.fillStyle=f}else a.fillStyle="rgba(128, 128, 128, 1)";a.fillRect(0,0,o,s)}function D(t){const{width:l,height:n}=t,s=t.getContext("2d").getImageData(0,0,l,n),r=new Uint8Array(s.data);for(let o=0;o<r.length;o+=4){const e=r[o+3]/255;r[o]*=e,r[o+1]*=e,r[o+2]*=e}return[r,l,n]}export{U as c,P as e,K as g,W as h,j as m,N as p,S as t,J as u};
