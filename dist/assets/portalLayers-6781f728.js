import{aq as d,s as w,aO as u,aP as l}from"./index-10102046.js";import{a as N,l as I}from"./associatedFeatureServiceUtils-89c2d67c.js";import{getNumLayersAndTables as m,preprocessFSItemData as v,getSubtypeGroupLayerIds as g,getOrientedImageryLayerIds as M,populateSceneServiceItemData as T,getFirstLayerOrTableId as h,LayerLoadContext as $}from"./layersLoader-4a5443ca.js";import"./fetchService-b1de0ed5.js";import"./jsonContext-b65b26ad.js";async function X(e){!e.portalItem||e.portalItem instanceof d||(e={...e,portalItem:new d(e.portalItem)});const a=await F(e.portalItem);return new a.constructor({portalItem:e.portalItem,...a.properties})}async function F(e){await e.load();const a=new $;return G(await b(e,a))}async function b(e,a){switch(e.type){case"Map Service":return C(e,a);case"Feature Service":return V(e,a);case"Feature Collection":return j(e);case"Scene Service":return W(e,a);case"Image Service":return K(e,a);case"Stream Service":return O();case"Vector Tile Service":return D();case"GeoJson":return k();case"CSV":return x();case"KML":return A();case"WFS":return J();case"WMTS":return R();case"WMS":return P();case"Feed":return U();default:throw new w("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type})}}async function G(e){const a=e.className,r=N[a];return{constructor:await r(),properties:e.properties}}async function C(e,a){return await q(e,a)?{className:"TileLayer"}:{className:"MapImageLayer"}}async function V(e,a){const r=await L(e,a);if(typeof r=="object"){const s={};return r.id!=null&&(s.layerId=r.id),{className:r.className||"FeatureLayer",properties:s}}return{className:"GroupLayer"}}async function W(e,a){var s;const r=await L(e,a,async()=>{try{if(!e.url)return[];const{serverUrl:t}=await I(e.url,{sceneLayerItem:e}),n=await a.fetchServiceMetadata(t);return(n==null?void 0:n.tables)??[]}catch{return[]}});if(typeof r=="object"){const t={};let n;if(r.id!=null?(t.layerId=r.id,n=`${e.url}/layers/${r.id}`):n=e.url,(s=e.typeKeywords)==null?void 0:s.length){for(const i of Object.keys(u))if(e.typeKeywords.includes(i))return{className:u[i]}}const c=await a.fetchServiceMetadata(n);return{className:u[c==null?void 0:c.layerType]||"SceneLayer",properties:t}}if(r===!1){const t=await a.fetchServiceMetadata(e.url);if((t==null?void 0:t.layerType)==="Voxel")return{className:"VoxelLayer"}}return{className:"GroupLayer"}}async function j(e){await e.load();const a=l(e,"Map Notes"),r=l(e,"Markup");if(a||r)return{className:"MapNotesLayer"};if(l(e,"Route Layer"))return{className:"RouteLayer"};const s=await e.fetchData();return m(s)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function K(e,a){var o,p,f;await e.load();const r=((o=e.typeKeywords)==null?void 0:o.map(S=>S.toLowerCase()))??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const s=await e.fetchData(),t=s==null?void 0:s.layerType;if(t==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(t==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const n=await a.fetchServiceMetadata(e.url),c=(p=n.cacheType)==null?void 0:p.toLowerCase(),i=(f=n.capabilities)==null?void 0:f.toLowerCase().includes("tilesonly");return c==="map"||i?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function O(){return{className:"StreamLayer"}}function D(){return{className:"VectorTileLayer"}}function k(){return{className:"GeoJSONLayer"}}function x(){return{className:"CSVLayer"}}function A(){return{className:"KMLLayer"}}function J(){return{className:"WFSLayer"}}function P(){return{className:"WMSLayer"}}function R(){return{className:"WMTSLayer"}}function U(){return{className:"StreamLayer"}}async function q(e,a){return(await a.fetchServiceMetadata(e.url)).tileInfo}async function L(e,a,r){const s=e.url;if(!s||/\/\d+$/.test(s))return{};await e.load();let t=await e.fetchData();if(e.type==="Feature Service"){const c=y(await v(t,s,a));if(typeof c=="object"){const i=g(t),o=M(t);c.className=c.id!=null&&i.includes(c.id)?"SubtypeGroupLayer":c.id!=null&&(o!=null&&o.includes(c.id))?"OrientedImageryLayer":"FeatureLayer"}return c}if(e.type==="Scene Service"&&(t=await T(e,t,a)),m(t)>0)return y(t);const n=await a.fetchServiceMetadata(s);return r&&(n.tables=await r()),y(n)}function y(e){return m(e)===1&&{id:h(e)}}export{X as fromItem,b as selectLayerClassPath};
