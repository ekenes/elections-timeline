import{n as t,q as o,t as d,B as s,s as m}from"./index-1f15e2a2.js";function r(i){return{name:`orientedImageryProperties.${i}`,write:!0,origins:{service:{name:`orientedImageryInfo.orientedImageryProperties.${i}`}}}}let e=class extends s{constructor(){super(...arguments),this.geometryType="point",this.operationalLayerType="OrientedImageryLayer",this.type="oriented-imagery"}get effectiveElevationSource(){var y;const{elevationSource:i,demPathPrefix:a,demPathSuffix:n}=this;if(!((y=i==null?void 0:i.url)!=null&&y.trim()))return i;let p=i.url.trim();return a!=null&&a.trim()&&(p=`${a.trim()}/${p}`),n!=null&&n.trim()&&(p+=`/${n.trim()}`),{...i,url:p}}_verifySource(){if(super._verifySource(),this.geometryType!=="point")throw new m("oriented-imagery-layer:invalid-geometry-type","OrientedImageryLayer only supports point geometry type")}};t([o({json:r("cameraHeading")})],e.prototype,"cameraHeading",void 0),t([o({json:r("cameraHeight")})],e.prototype,"cameraHeight",void 0),t([o({json:r("cameraPitch")})],e.prototype,"cameraPitch",void 0),t([o({json:r("cameraRoll")})],e.prototype,"cameraRoll",void 0),t([o({json:r("coveragePercent")})],e.prototype,"coveragePercent",void 0),t([o({json:r("demPathPrefix")})],e.prototype,"demPathPrefix",void 0),t([o({json:r("demPathSuffix")})],e.prototype,"demPathSuffix",void 0),t([o({json:r("depthImagePathPrefix")})],e.prototype,"depthImagePathPrefix",void 0),t([o({json:r("depthImagePathSuffix")})],e.prototype,"depthImagePathSuffix",void 0),t([o({json:r("farDistance")})],e.prototype,"farDistance",void 0),t([o({json:{write:!0}})],e.prototype,"geometryType",void 0),t([o({json:r("horizontalFieldOfView")})],e.prototype,"horizontalFieldOfView",void 0),t([o({json:r("horizontalMeasurementUnit")})],e.prototype,"horizontalMeasurementUnit",void 0),t([o({json:r("imagePathPrefix")})],e.prototype,"imagePathPrefix",void 0),t([o({json:r("imagePathSuffix")})],e.prototype,"imagePathSuffix",void 0),t([o({json:r("imageRotation")})],e.prototype,"imageRotation",void 0),t([o({json:r("maximumDistance")})],e.prototype,"maximumDistance",void 0),t([o({json:r("nearDistance")})],e.prototype,"nearDistance",void 0),t([o({type:["OrientedImageryLayer"]})],e.prototype,"operationalLayerType",void 0),t([o({json:r("orientedImageryType")})],e.prototype,"orientedImageryType",void 0),t([o({json:{read:!1},value:"oriented-imagery",readOnly:!0})],e.prototype,"type",void 0),t([o({json:r("verticalFieldOfView")})],e.prototype,"verticalFieldOfView",void 0),t([o({json:r("verticalMeasurementUnit")})],e.prototype,"verticalMeasurementUnit",void 0),t([o({json:r("videoPathPrefix")})],e.prototype,"videoPathPrefix",void 0),t([o({json:r("videoPathSuffix")})],e.prototype,"videoPathSuffix",void 0),t([o({json:r("elevationSource")})],e.prototype,"elevationSource",void 0),t([o()],e.prototype,"effectiveElevationSource",null),e=t([d("esri.layers.OrientedImageryLayer")],e);const f=e;export{f as default};
