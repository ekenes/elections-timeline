import{hF as _,fV as f,hG as c,hH as d,a8 as x}from"./index-b8632133.js";import{r as g}from"./Program-774c202b.js";let m=class{constructor(e){this._readFile=e}resolveIncludes(e){return this._resolve(e)}_resolve(e,r=new Map){if(r.has(e))return r.get(e);const i=this._read(e);if(!i)throw new Error(`cannot find shader file ${e}`);const n=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let s=n.exec(i);const h=[];for(;s!=null;)h.push({path:s[1],start:s.index,length:s[0].length}),s=n.exec(i);let o=0,a="";return h.forEach(l=>{a+=i.slice(o,l.start),a+=r.has(l.path)?"":this._resolve(l.path,r),o=l.start+l.length}),a+=i.slice(o),r.set(e,a),a}_read(e){return this._readFile(e)}};const u=()=>x.getLogger("esri.views.webgl.VertexArrayObject");let p=class{constructor(t,e,r,i,n=null){this._context=t,this._locations=e,this._layout=r,this._buffers=i,this._indexBuffer=n,this._glName=null,this._initialized=!1}get glName(){return this._glName}get context(){return this._context}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get byteSize(){return Array.from(this._buffers.values()).reduce((t,e)=>t+e.usedMemory,this._indexBuffer!=null?this._indexBuffer.usedMemory:0)}get layout(){return this._layout}get locations(){return this._locations}get usedMemory(){return this.byteSize+(Object.keys(this._buffers).length+(this._indexBuffer?1:0))*_}dispose(){this._context?(this._context.getBoundVAO()===this&&this._context.bindVAO(null),this._buffers.forEach(t=>t.dispose()),this._buffers.clear(),this._indexBuffer=f(this._indexBuffer),this.disposeVAOOnly()):(this._glName||Object.getOwnPropertyNames(this._buffers).length>0)&&u().warn("Leaked WebGL VAO")}disposeVAOOnly(){this._glName&&(this._context.gl.deleteVertexArray(this._glName),this._glName=null,this._context.instanceCounter.decrement(c.VertexArrayObject,this)),this._context=null}initialize(){if(this._initialized)return;const{gl:t}=this._context,e=t.createVertexArray();t.bindVertexArray(e),this._bindLayout(),t.bindVertexArray(null),this._glName=e,this._context.instanceCounter.increment(c.VertexArrayObject,this),this._initialized=!0}bind(){this.initialize(),this._context.gl.bindVertexArray(this.glName)}_bindLayout(){const{_buffers:t,_layout:e,_indexBuffer:r}=this;t||u().error("Vertex buffer dictionary is empty!");const i=this._context.gl;this._buffers.forEach((n,s)=>{const h=e.get(s);h?d(this._context,this._locations,n,h):u().error("Vertex element descriptor is empty!")}),r!=null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,r.glName)}unbind(){this.initialize(),this._context.gl.bindVertexArray(null)}};function A(t,e,r=""){return new g(t,r+e.shaders.vertexShader,r+e.shaders.fragmentShader,e.attributes)}export{A as a,m as e,p as o};
