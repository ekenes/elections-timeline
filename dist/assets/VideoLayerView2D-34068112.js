import{g5 as J,fU as X,fW as j,bJ as b,fX as Y,fV as k,bZ as B,c1 as K,c as N,bR as g,bC as Z,g6 as $,aV as z,g7 as Q,b9 as v,eq as ee,en as R,ep as q,bO as U,bI as M,C,D as V,J as te}from"./index-76dad814.js";import{h as ie}from"./GraphicsLayer-ffff398b.js";import{i as W}from"./TelemetryDisplay-69760521.js";import{u as re}from"./OverlayContainer-3703b032.js";import{s as se}from"./Container-7d8e2c65.js";import{a as oe,S as ne,y as ae}from"./LayerView-f9504649.js";import{t as le}from"./GraphicContainer-d78d8c36.js";import{F as he}from"./GraphicsView2D-e6dd896d.js";import"./vec3f32-ad1dc57f.js";import"./WGLContainer-4d1040d6.js";import"./LabelMetric-0c0f7b53.js";import"./Program-7c8339fc.js";import"./VertexElementDescriptor-2925c6af.js";import"./ProgramTemplate-3453859f.js";import"./StyleDefinition-400d42c2.js";import"./config-1337d16e.js";import"./earcut-5a6c70eb.js";import"./featureConversionUtils-b0e2d6ba.js";import"./FeatureCommandQueue-fbd9efcc.js";import"./UpdateTracking2D-5254655f.js";import"./BidiEngine-664145a5.js";import"./GeometryUtils-4bd00e57.js";import"./Rect-ea14f53a.js";import"./BindType-d21d71dd.js";import"./Util-83a8abcd.js";import"./constants-572e4a3b.js";import"./AGraphicContainer-df6a8f27.js";import"./TechniqueInstance-293bec37.js";import"./TileContainer-b31b7674.js";import"./AttributeStore-b81393b3.js";import"./TimeOnly-45af311b.js";import"./timeSupport-d7036d62.js";import"./normalizeUtilsSync-3c9c0cab.js";const x=2;class me extends se{constructor(e){super(),this.element=e,this._handles=new J,this.isWrapAround=!1,this.perspectiveTransform=X(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(j(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(Y(t,"play",()=>this.requestRender()))},b))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=k(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:r}=e,{videoWidth:i,videoHeight:o}=t;if(i!==0&&o!==0){if(this.texture)t.paused||this.texture.setData(t);else{const n=new B;n.wrapMode=K.CLAMP_TO_EDGE,n.preMultiplyAlpha=!0,n.width=i,n.height=o,this.texture=new N(r,n,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,r,i){const o=this.element,n=this._getFrameInfo();if(!o||!n)return;this._initializeData(e,n,r);const{controlPoints:l,horizon:h}=n,m=Math.sqrt(l.length),c=m,{x:a,y:p}=e,u=this._vertices,T=l[0],O=l[m-1],F=l[(c-1)*m],I=l[(c-1)*m+m-1],P=g(h?h[0].mapPoint:T.mapPoint,r),G=g(h?h[1].mapPoint:O.mapPoint,r),f=g(F.mapPoint,r),L=g(I.mapPoint,r);this.clipGeometry=h?new oe({geometry:Z.fromJSON({rings:[[[f.x,f.y],[L.x,L.y],[G.x,G.y],[P.x,P.y],[f.x,f.y]]],spatialReference:r})}):null;for(let y=0;y<l.length;y++){const D=l[y],{sourcePoint:E,mapPoint:A}=D;if(E==null||A==null)continue;const w=g(A,r);u[y*x+0]=w.x-a,u[y*x+1]=w.y-p}let S=t;if(i){const y=Math.min(P.x,G.x,f.x,L.x),D=Math.max(P.x,G.x,f.x,L.x),{worldWidth:E,xBounds:A}=i,[w,H]=A;y<w&&D>w?S=E:D>H&&y<H&&(S=-E)}this.wrapAroundShift=S,this.isWrapAround=S!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,r){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:i}=t,o=Math.sqrt(i.length),n=o,l=new Float32Array(x*i.length),h=new Uint16Array(2*i.length);for(let a=0;a<i.length;a++){const p=i[a],{sourcePoint:u,mapPoint:T}=p;if(u==null||T==null)continue;const O=g(T,r);l[a*x+0]=O.x-e.x,l[a*x+1]=O.y-e.y,h[2*a+0]=u.x,h[2*a+1]=u.y}const m=new Uint16Array(n*o+(n-2)*(o+2));let c=0;for(let a=0;a<n;a++){for(let p=0;p<o;p++)m[c++]=a*o+p,m[c++]=(a+1)*o+p;a<n-2&&(m[c++]=(a+1)*o+(o-1),m[c++]=(a+1)*o)}this._vertices=l,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let r=null;if(t){const i=t.startX,o=t.startY,n=t.endX,l=t.endY;r=[{sourcePoint:$(i,o),mapPoint:new z(t.startLongitude,t.startLatitude)},{sourcePoint:$(n,l),mapPoint:new z(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:r}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e==null?void 0:e.length;if(!t)return[];const r=new Array(t);for(let i=0;i<t;i++){const{x:o,y:n,lat:l,lon:h}=e[i];r[i]={sourcePoint:$(o,-n),mapPoint:new z(h,l)}}return r}}const _=new Q([255,127,0]);let d=class extends ne(ae){constructor(){super(...arguments),this._graphicsLayer=new ie,this._frameOutlineGraphic=new v({symbol:new ee({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new v({symbol:new R({color:_})}),this._lineOfSightGraphic=new v({symbol:new R({color:_})}),this._sensorLocationGraphic=new v({symbol:new q({color:_})}),this._frameCenterGraphic=new v({symbol:new q({color:_})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){var s,e,t,r,i;this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frameCenter:((s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter)??!0,frameOutline:((e=this.layer.telemetryDisplay)==null?void 0:e.frameOutline)??!0,lineOfSight:((t=this.layer.telemetryDisplay)==null?void 0:t.lineOfSight)??!0,sensorLocation:((r=this.layer.telemetryDisplay)==null?void 0:r.sensorLocation)??!0,sensorTrail:((i=this.layer.telemetryDisplay)==null?void 0:i.sensorTrail)??!0})}attach(){this._overlayContainer=new re,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new he({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new le(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>{var s,e,t,r,i;return[(s=this.layer.telemetryDisplay)==null?void 0:s.frameCenter,(e=this.layer.telemetryDisplay)==null?void 0:e.frameOutline,(t=this.layer.telemetryDisplay)==null?void 0:t.sensorLocation,(r=this.layer.telemetryDisplay)==null?void 0:r.sensorTrail,(i=this.layer.telemetryDisplay)==null?void 0:i.lineOfSight]},()=>this._updateVisibleTelemetryElements(),b),M(()=>{var s,e,t,r,i;return[this.layer.telemetry,(s=this.visibleTelemetryElements)==null?void 0:s.frameCenter,(e=this.visibleTelemetryElements)==null?void 0:e.frameOutline,(t=this.visibleTelemetryElements)==null?void 0:t.sensorLocation,(r=this.visibleTelemetryElements)==null?void 0:r.sensorTrail,(i=this.visibleTelemetryElements)==null?void 0:i.lineOfSight]},()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(s){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(s){this.graphicsView.processUpdate(s)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:s}=this.layer,{visibleTelemetryElements:e}=this;s&&e&&(e.frameOutline&&s.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&s.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&s.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&s.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&s.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const s=new me(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{s.frameHorizonPoints=this.layer.frameHorizonPoints,s.groundControlPoints=this.layer.groundControlPoints},b)]),this._overlayContainer.addChild(s),this.view.stage.requestRender()}};C([V()],d.prototype,"graphicsView",void 0),C([V()],d.prototype,"layer",void 0),C([V()],d.prototype,"symbolColor",void 0),C([V({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=C([te("esri.views.2d.layers.VideoLayerView2D")],d);const Je=d;export{Je as default};
