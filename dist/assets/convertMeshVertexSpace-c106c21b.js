import{ab as m,s,a$ as i}from"./index-76dad814.js";import{p as a}from"./MeshVertexAttributes-bb03ad8c.js";import{M as n}from"./vertexSpaceConversion-d1e00a53.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-7b1f8778.js";import"./computeTranslationToOriginAndRotation-b9200a03.js";import"./projectPointToVector-72a3565b.js";import"./meshVertexSpaceUtils-20e850aa.js";import"./MeshLocalVertexSpace-1fd92730.js";import"./vec3-e5495f74.js";import"./projection-75a0a6f3.js";import"./DoubleArray-ac96f6cd.js";import"./BufferView-6edfd8ea.js";import"./vec4-228ad9a1.js";async function S(t,r,p){await Promise.resolve(),m(p);const o=n(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new a({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
