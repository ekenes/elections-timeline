import{_ as E,cu as R,hj as c,cT as B}from"./index-c2b82012.js";import{_ as l}from"./TextureFormat-60b88abd.js";function w(){return C??(C=(async()=>{const a=await E(()=>import("./basis_encoder-082df239.js"),[]),n=await a.default({locateFile:s=>R(`esri/libs/basisu/${s}`)});return n.initializeBasis(),n})()),C}let C,i=null,p=null;class S{constructor(n,s){this.internalFormat=n,this.compressedTexture=s}}async function X(a){await _();const n=G(a.data,a.flipped),s=await f(n,a.width,a.height,a.hasMipmap),t=s?await g(s,a.hasETC,a.hasS3TC):null;return{result:new S((t==null?void 0:t.internalFormat)??null,(t==null?void 0:t.compressedTexture)??null)}}async function _(){return p==null&&(p=w(),i=await w()),p}async function f(a,n,s,t,o=255,u=0,T=!1,r=!1){i==null&&(i=await _());const e=new i.BasisEncoder;e.setUASTC(!1),e.setHDR(!1),e.setPerceptual(!r),e.setCheckForAlpha(!0),e.setForceAlpha(!1),e.setRenormalize(r),e.setMipGen(t),e.setMipSRGB(!r),e.setCreateKTX2File(!0),e.setKTX2UASTCSupercompression(!1),e.setKTX2SRGBTransferFunc(!r),e.setQualityLevel(o),e.setCompressionLevel(u);const m=new Uint8Array(25165824);e.setSliceSourceImage(0,new Uint8Array(a),n,s,T);const A=e.encode(m),h=new Uint8Array(m.buffer,0,A),d=new i.KTX2File(new Uint8Array(h));return d.isValid()?(e.delete(),h):(d.close(),d.delete(),e.delete(),null)}async function g(a,n,s){i==null&&(i=await _());const t=new i.KTX2File(new Uint8Array(a));t.startTranscoding();const[o,u]=n?t.getHasAlpha()?[l.ETC2_RGBA,c.COMPRESSED_RGBA8_ETC2_EAC]:[l.ETC1_RGB,c.COMPRESSED_RGB8_ETC2]:s?t.getHasAlpha()?[l.BC3_RGBA,c.COMPRESSED_RGBA_S3TC_DXT5_EXT]:[l.BC1_RGB,c.COMPRESSED_RGB_S3TC_DXT1_EXT]:[l.RGBA32,B.RGBA],T=t.getLevels(),r=[];for(let e=0;e<T;e++)r.push(new Uint8Array(t.getImageTranscodedSizeInBytes(e,0,0,o))),t.transcodeImage(r[e],e,0,0,o,0,-1,-1);return t.close(),t.delete(),{internalFormat:u,compressedTexture:{type:"compressed",levels:r}}}function G(a,n=!1){const s=new OffscreenCanvas(a.width,a.height),t=s.getContext("2d");return n&&(t.translate(0,s.height),t.scale(1,-1)),t.drawImage(a,0,0),t.getImageData(0,0,s.width,s.height).data}export{S as TextureCompressionWorkerOutput,X as compress,f as compressRGBADataToKTX2,g as createTextureDataKTX2,_ as loadBasisEncoder};
