import{aa as p,s,aQ as i}from"./index-fc6a9042.js";import{l as a}from"./MeshVertexAttributes-ac5252ee.js";import{M as n}from"./vertexSpaceConversion-24d85eaa.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-4fcbd8c9.js";import"./computeTranslationToOriginAndRotation-162a992d.js";import"./meshVertexSpaceUtils-26f4982b.js";import"./MeshLocalVertexSpace-e2419621.js";import"./vec3-db8a92fb.js";import"./projection-f42a2f5e.js";import"./DoubleArray-8eb7fbf1.js";import"./BufferView-48cbf6dd.js";import"./vec4-106deac4.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=n(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new a({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
