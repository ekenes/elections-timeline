import{a8 as M,nH as Wt,r,q as l,A as T,w as v,S as j,aU as be,Y as V,C as re,ff as He,aT as Zt,p5 as ve,p6 as st,p7 as nt,aY as ae,dS as ee,z as q,bF as ht,B as Le,aZ as te,aW as Kt,a$ as Xt,fb as Tt,cx as Vt,cj as Yt,y as J,D as G,H,G as B,U as D,ag as je,ez as gt,ef as ei,hK as ti,eJ as ii,dM as ri,N as si,$ as _t,s as x,g9 as ct,ga as ni,cv as ai,ai as oi,p8 as li,jK as ui,d9 as pi,fa as ci,da as mi,eE as di,eF as yi,eD as hi,eQ as gi,eP as fi,eG as wi,dd as Ri,fH as vi,bX as bi,hF as Si,hv as ke,fd as xi,eI as Ii,hL as Fi,cy as Di,_ as Ti}from"./index-c2b82012.js";import{N as F,a as Re,i as Ue,f as W,g as ji,c as Ni,l as Pi,d as _i,n as mt,b as Oi,B as Ci,L as $i,U as Ai,q as Mi,e as Vi,t as Ji}from"./ImageHistogramParameters-c824bf14.js";import{b as Ei,s as qi,c as Gi,m as Li,e as Ui,j as zi,v as Hi,$ as Bi,k as dt,g as Qi,p as ki,d as Wi,P as Zi,t as Te,n as Ki,l as Xi}from"./rasterFieldUtils-de2f9fda.js";import{j as Yi,g as yt,s as er,l as tr}from"./dataUtils-30595099.js";import{S as Jt,d as Et,e as ir,q as rr,A as sr,n as nr,a as qt,_ as ar,j as Ot,P as or}from"./RasterSymbolizer-4caa33d2.js";import{t as Ct}from"./imageBitmapUtils-41d4a232.js";import{f as $t,p as lr,c as ur,o as pr}from"./RasterPresetRendererMixin-387475e0.js";import{a as cr,s as mr}from"./executeForIds-0ae846d8.js";import"./ClassBreaksDefinition-e3a59351.js";import"./_commonjsHelpers-2f3e7994.js";const dr={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},yr=new Set(["u1","u2","u4","u8","s8","u16","s16"]),hr={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},gr=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Gt(s){return gr.has(s.type)}function ft(s,i){var e;if(!s||!i)return M(s||i);const a=M(s);if(a.functionDefinition&&i.rasterFunctionDefinition){const t=i.rasterFunctionDefinition;(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=void 0),Lt(a.functionDefinition.arguments,i),a.rasterFunctionDefinition=a.functionDefinition.toJSON()}else((e=i.functionName)==null?void 0:e.toLowerCase())!=="none"&&(Ut(a.functionArguments).Raster=i);return a}function Lt(s,i){for(const a in s)a.toLowerCase()==="raster"&&(s[a].type==="RasterFunctionVariable"?(s[a]=i.rasterFunctionDefinition,s[a].type="RasterFunctionTemplate"):s[a].type==="RasterFunctionTemplate"&&Lt(s[a].arguments,i))}function se(s){const i=M(dr[s.functionName+"Function"]),a=s.functionArguments;for(const e in a)e.toLowerCase()==="raster"?(i.arguments[e]=se(a[e]),i.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(i.arguments[e].value=Ir(a[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=a[e];return i}function fr(s,i){switch(i=i||{},s.type){case"raster-stretch":return vr(s,i);case"class-breaks":return br(s,i);case"unique-value":return Sr(s,i);case"raster-colormap":return xr(s,i);case"vector-field":return wr(s,i);case"raster-shaded-relief":return Rr(s,i);case"flow":throw new Error("Unsupported rendering rule.")}}function Ut(s){const i=(s==null?void 0:s.Raster)??(s==null?void 0:s.raster);return i&&i.declaredClass==="esri.layers.support.RasterFunction"?Ut(i.functionArguments):s}const Me={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function wr(s,i){const a=new F;a.functionName="VectorFieldRenderer";const{dataType:e,bandNames:t}=i,n=e==="vector-uv";let o,u;if(t&&t.length===2){const g=t.map(w=>w.toLowerCase());o=g.indexOf("magnitude"),u=g.indexOf("direction")}o!==-1&&o!==null||(o=0,u=1);const p=s.rotationType==="arithmetic"?1:2,m=s.flowRepresentation==="flow-from"?0:1,c=s.visualVariables?s.visualVariables.find(g=>g.field==="Magnitude"):new Wt,d={magnitudeBandID:o,directionBandID:u,isUVComponents:n,referenceSystem:p,massFlowAngleRepresentation:m,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:hr[s.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};a.functionArguments=d;const h=se(a);return i.convertToRFT?F.fromJSON({rasterFunctionDefinition:h}):a}function Rr(s,i){const a=i.convertToRFT;if(i.dataType!=="elevation"&&(i.dataType!=="generic"||i.bandCount!==1||i.pixelType!=="s16"&&i.pixelType!=="s32"&&i.pixelType!=="f32"&&i.pixelType!=="f64"))return new F;const e=new F;e.functionName="Hillshade";const t=s.hillshadeType==="traditional"?0:1,n=s.scalingType==="none"?1:3,o={HillshadeType:t,SlopeType:n,ZFactor:s.zFactor};return t===0&&(o.Azimuth=s.azimuth,o.Altitude=s.altitude),n===3&&(o.PSPower=s.pixelSizePower,o.PSZFactor=s.pixelSizeFactor),e.functionArguments=o,e.variableName="Raster",s.colorRamp&&(e.functionName="ShadedRelief",a?o.ColorRamp=Jt(s.colorRamp):o.Colormap=Et(s.colorRamp)),a?new F({rasterFunctionDefinition:se(e)}):e}function vr(s,i){var p,m;const a=i.convertToRFT,e=new F;e.functionName="Stretch";const t=Me[ir.toJSON(s.stretchType)],n="u8",o=(p=s.customStatistics)==null?void 0:p.map(c=>[c.min,c.max,c.avg??0,c.stddev??1]),u={StretchType:t,Statistics:o,DRA:s.dynamicRangeAdjustment,UseGamma:s.useGamma,Gamma:s.gamma,ComputeGamma:s.computeGamma};if(s.outputMin!=null&&(u.Min=s.outputMin),s.outputMax!=null&&(u.Max=s.outputMax),t===Me.standardDeviation?(u.NumberOfStandardDeviations=s.numberOfStandardDeviations,e.outputPixelType=n):t===Me.percentClip?(u.MinPercent=s.minPercent,u.MaxPercent=s.maxPercent,e.outputPixelType=n):t===Me.minMax?e.outputPixelType=n:t===Me.sigmoid&&(u.SigmoidStrengthLevel=s.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",s.colorRamp){const c=s.colorRamp,d=new F;if(a)d.functionArguments={ColorRamp:Jt(c)};else{const h=rr(c,!0);if(h)d.functionArguments={colorRampName:h};else if(!i.convertColorRampToColormap||c.type!=="algorithmic"&&c.type!=="multipart"){const g=s.colorRamp.toJSON();g.type==="algorithmic"?g.algorithm=g.algorithm||"esriCIELabAlgorithm":g.type==="multipart"&&((m=g.colorRamps)!=null&&m.length)&&g.colorRamps.forEach(w=>w.algorithm=w.algorithm||"esriCIELabAlgorithm"),d.functionArguments={colorRamp:g}}else d.functionArguments={Colormap:Et(c)}}return d.variableName="Raster",d.functionName="Colormap",d.functionArguments.Raster=e,a?new F({rasterFunctionDefinition:se(d)}):d}return a?new F({rasterFunctionDefinition:se(e)}):e}function br(s,i){const a=[],e=[],t=[],n=[],{pixelType:u,rasterAttributeTable:p}=i,m=p==null?null:p.features,c=zt(p);if(c&&m&&Array.isArray(m)&&s.classBreakInfos){s.classBreakInfos.forEach((y,R)=>{var N;const I=(N=y.symbol)==null?void 0:N.color;let S;I!=null&&I.a&&y.minValue!=null&&y.maxValue!=null&&m.forEach(L=>{y.minValue!=null&&y.maxValue!=null&&(S=L.attributes[s.field],(S>=y.minValue&&S<y.maxValue||R===s.classBreakInfos.length-1&&S>=y.minValue)&&n.push([L.attributes[c],I.r,I.g,I.b]))})});const w=u?at(n,u):n,f=new F;return f.functionName="Colormap",f.functionArguments={},f.functionArguments.Colormap=w,f.variableName="Raster",i.convertToRFT?new F({rasterFunctionDefinition:se(f)}):f}s.classBreakInfos.forEach((w,f)=>{if(w.minValue==null||w.maxValue==null)return;const y=w.symbol&&w.symbol.color;y!=null&&y.a?(f===0?a.push(w.minValue,w.maxValue+1e-4):a.push(w.minValue+1e-4,w.maxValue+1e-4),e.push(f),n.push([f,y.r,y.g,y.b])):t.push(w.minValue,w.maxValue)});const d=u?at(n,u):n,h=new F;h.functionName="Remap",h.functionArguments={InputRanges:a,OutputValues:e,NoDataRanges:t},h.variableName="Raster";const g=new F;return g.functionName="Colormap",g.functionArguments={Colormap:d,Raster:h},i.convertToRFT?new F({rasterFunctionDefinition:se(g)}):g}function at(s,i){const a=yr.has(i)?Yi(i):null;return a&&s.push([Math.floor(a[0]-1),0,0,0],[Math.ceil(a[1]+1),0,0,0]),s}function zt(s){if(s==null)return;const{fields:i}=s,a=i==null?void 0:i.find(e=>(e==null?void 0:e.name)&&e.name.toLowerCase()==="value");return a==null?void 0:a.name}function Sr(s,i){var d,h;const a=[],{pixelType:e,rasterAttributeTable:t}=i,n=t==null?null:t.features,o=zt(t),u=(h=(d=s.defaultSymbol)==null?void 0:d.color)==null?void 0:h.toRgb(),p=s.uniqueValueInfos;if(p)if(n){if(o){const g=new Map;p.forEach(f=>{const y=f.value,R=At(f);y!=null&&(R!=null&&R.a)&&g.set(String(y),R.toRgb())});const w=s.field;w&&n.forEach(({attributes:f})=>{const y=String(f[w]),R=f[o],I=g.get(y);I?a.push([R,...I]):u&&a.push([R,...u])})}}else for(let g=0;g<p.length;g++){const w=p[g],f=At(w),y=+w.value;if(f!=null&&f.a){if(isNaN(y))return null;a.push([y,f.r,f.g,f.b])}}const m=e?at(a,e):a,c=new F;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=m,c.variableName="Raster",i.convertToRFT?new F({rasterFunctionDefinition:se(c)}):c}function At(s){var i,a,e,t,n;return((i=s.symbol)==null?void 0:i.type)==="polygon-3d"?(t=(e=(a=s.symbol.symbolLayers)==null?void 0:a.find(o=>o.type==="fill"))==null?void 0:e.material)==null?void 0:t.color:(n=s.symbol)==null?void 0:n.color}function xr(s,i){const a=s.extractColormap();if(!a||a.length===0)return null;const{pixelType:e}=i,t=e?at(a,e):a,n=new F;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=t,i.convertToRFT?new F({rasterFunctionDefinition:se(n)}):n}function Ir(s){const i=[],a=[];return s.forEach(e=>{i.push(e[0]),a.push(sr([...e.slice(1),255]))}),{type:"RasterColormap",values:i,colors:a}}let C=class extends j{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.pixelType=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(i,a,e){this.layer.version<10.3||(a[e]=i)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(i,a,e){this.format&&this.format.toLowerCase().includes("jpg")&&i!=null&&(a[e]=i)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(i,a,e){this.format==="lerc"&&i!=null&&(a[e]=i)}get format(){var i;return((i=this.layer.renderer)==null?void 0:i.type)==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}writeLercVersion(i,a,e){this.format==="lerc"&&this.layer.version>=10.5&&(a[e]=i)}get version(){const i=this.layer;return i.commitProperty("bandIds"),i.commitProperty("format"),i.commitProperty("compressionQuality"),i.commitProperty("compressionTolerance"),i.commitProperty("interpolation"),i.commitProperty("noData"),i.commitProperty("noDataInterpretation"),i.commitProperty("mosaicRule"),i.commitProperty("rasterFunction"),i.commitProperty("adjustAspectRatio"),i.commitProperty("pixelFilter"),i.commitProperty("definitionExpression"),i.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(i){this._set("version",i)}get mosaicRule(){const i=this.layer;let a=i.mosaicRule;const e=i.definitionExpression;return a?e&&e!==a.where&&(a=a.clone(),a.where=e):e&&(a=new W({where:e})),a}get rasterFunction(){var o,u;const i=this.layer;let{rasterFunction:a}=i;const e=i.pixelFilter,t=!i.format||i.format.includes("jpg")||i.format.includes("png");a=this._addResampleRasterFunction(a);const n=(o=i.multidimensionalSubset)==null?void 0:o.areaOfInterest;return n&&(a=Fr(a,n)),t&&!e&&((u=i.renderer)==null?void 0:u.type)!=="vector-field"&&(a=this.combineRendererWithRenderingRule(a)),a}combineRendererWithRenderingRule(i){const a=this.layer,{rasterInfo:e,renderer:t}=a;return i=i||a.rasterFunction,!t||!Gt(t)?i:ft(fr(t,{rasterAttributeTable:e.attributeTable,pixelType:e.pixelType,dataType:e.dataType,bandNames:e.bandInfos.map(({name:n})=>n),convertColorRampToColormap:a.version<10.6,convertToRFT:!!(i!=null&&i.rasterFunctionDefinition),bandCount:e.bandCount}),i)}_addResampleRasterFunction(i){var n;if(((n=this.layer.renderer)==null?void 0:n.type)!=="vector-field"||(i==null?void 0:i.functionName)==="Resample")return i;const a=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let t=new F({functionName:"Resample",functionArguments:{ResamplingType:a,InputCellSize:e}});return t=i!=null&&i.rasterFunctionDefinition?new F({rasterFunctionDefinition:se(t)}):t,ft(t,i)}};function Fr(s,i){const a=new F({functionName:"Clip",functionArguments:{ClippingGeometry:i.toJSON(),ClippingType:1}});return ft(a,s)}r([l()],C.prototype,"layer",void 0),r([l({json:{write:!0}})],C.prototype,"adjustAspectRatio",null),r([T("adjustAspectRatio")],C.prototype,"writeAdjustAspectRatio",null),r([l({json:{write:!0}})],C.prototype,"bandIds",null),r([l({json:{write:!0}})],C.prototype,"compression",void 0),r([l({json:{write:!0}})],C.prototype,"compressionQuality",null),r([T("compressionQuality")],C.prototype,"writeCompressionQuality",null),r([l({json:{write:!0}})],C.prototype,"compressionTolerance",null),r([T("compressionTolerance")],C.prototype,"writeCompressionTolerance",null),r([l({json:{write:!0}})],C.prototype,"format",null),r([l({type:String,json:{read:{reader:Re.read},write:{writer:Re.write}}})],C.prototype,"interpolation",null),r([l({json:{write:!0}})],C.prototype,"noData",null),r([l({type:String,json:{read:{reader:Ue.read},write:{writer:Ue.write}}})],C.prototype,"noDataInterpretation",null),r([l({json:{write:!0}})],C.prototype,"pixelType",void 0),r([l({json:{write:!0}})],C.prototype,"lercVersion",void 0),r([T("lercVersion")],C.prototype,"writeLercVersion",null),r([l({type:Number})],C.prototype,"version",null),r([l({json:{write:!0}})],C.prototype,"mosaicRule",null),r([l({json:{write:!0,name:"renderingRule"}})],C.prototype,"rasterFunction",null),C=r([v("esri.layers.support.ExportImageServiceParameters")],C);let he=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};r([l({type:V,json:{read:!0}})],he.prototype,"fromGeometry",void 0),r([l({type:V,json:{read:!0,write:!0}})],he.prototype,"toGeometry",void 0),r([l({json:{write:!0}})],he.prototype,"objectIds",void 0),r([l({type:String,json:{write:!0}})],he.prototype,"where",void 0),r([l({type:Number,json:{write:!0}})],he.prototype,"maxCount",void 0),he=r([v("esri.rest.support.FindImagesParameters")],he);const Dr=he,Ht=s=>{let i=class extends s{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return r([l({json:{write:!0}})],i.prototype,"make",void 0),r([l({json:{write:!0}})],i.prototype,"model",void 0),r([l({json:{write:!0}})],i.prototype,"focalLength",void 0),r([l({json:{write:!0}})],i.prototype,"pixelSize",void 0),r([l({json:{write:!0}})],i.prototype,"rows",void 0),r([l({json:{write:!0}})],i.prototype,"cols",void 0),i=r([v("esri.rest.support.CameraInfoMixin")],i),i};let K=class extends Ht(j){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(i,a){a.acquisitionDate=i==null?void 0:i.getTime()}};r([l({json:{write:!0}})],K.prototype,"id",void 0),r([l({json:{name:"uri",write:!0}})],K.prototype,"referenceUri",void 0),r([l({type:Date,json:{write:!0}})],K.prototype,"acquisitionDate",void 0),r([T("acquisitionDate")],K.prototype,"writeAcquisitionDate",null),r([l({json:{write:!0}})],K.prototype,"cameraID",void 0),r([l({type:V,json:{write:!0}})],K.prototype,"center",void 0),r([l({type:V,json:{write:!0}})],K.prototype,"perspectiveCenter",void 0),r([l({json:{write:!0}})],K.prototype,"orientation",void 0),K=r([v("esri.rest.support.ImageInspectionInfo")],K);const Tr=K;let We=class extends j{constructor(){super(...arguments),this.images=null}};r([l({type:[Tr],json:{write:!0}})],We.prototype,"images",void 0),We=r([v("esri.rest.support.FindImagesResult")],We);const jr=We;var wt;let xe=wt=class extends j{constructor(s){super(s),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new wt(M({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};r([l({type:[String],json:{name:"angleName",write:!0}})],xe.prototype,"angleNames",void 0),r([l({type:V,json:{write:!0}})],xe.prototype,"point",void 0),r([l({type:re,json:{write:!0}})],xe.prototype,"spatialReference",void 0),r([l({type:He,json:{write:!0}})],xe.prototype,"rasterId",void 0),xe=wt=r([v("esri.rest.support.ImageAngleParameters")],xe);const Nr=xe;let Ne=class extends j{constructor(i){super(i),this.north=null,this.up=null,this.spatialReference=null}};r([l({type:Number,json:{write:!0}})],Ne.prototype,"north",void 0),r([l({type:Number,json:{write:!0}})],Ne.prototype,"up",void 0),r([l({type:re,json:{write:!0}})],Ne.prototype,"spatialReference",void 0),Ne=r([v("esri.rest.support.ImageAngleResult")],Ne);const Pr=Ne,Z=new Zt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let we=class extends j{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};r([l({type:Number,json:{read:!0,write:!0}})],we.prototype,"value",void 0),r([l({type:String,json:{read:!0,write:!0}})],we.prototype,"displayValue",void 0),r([l({type:Number,json:{read:!0,write:!0}})],we.prototype,"uncertainty",void 0),we=r([v("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],we);let $e=class extends we{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:ve.read,write:ve.write}})],$e.prototype,"unit",void 0),$e=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],$e);let Ze=class extends we{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:st.read,write:st.write}})],Ze.prototype,"unit",void 0),Ze=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],Ze);let ze=class extends we{constructor(){super(...arguments),this.unit=null}};r([l({type:String,json:{read:nt.read,write:nt.write}})],ze.prototype,"unit",void 0),ze=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],ze);let ge=class extends j{constructor(i){super(i),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};r([l()],ge.prototype,"type",void 0),r([l({type:Z.apiValues,json:{read:Z.read,write:Z.write}})],ge.prototype,"measureOperation",void 0),r([l({type:W,json:{write:!0}})],ge.prototype,"mosaicRule",void 0),r([l({type:V,json:{write:!0}})],ge.prototype,"pixelSize",void 0),r([l({json:{write:!0}})],ge.prototype,"raster",void 0),ge=r([v("esri.rest.support.BaseImageMeasureParameters")],ge);const ot=ge;var Rt;let le=Rt=class extends ot{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=s.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Rt(M({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({types:ae,json:{name:"fromGeometry",read:!0,write:!0}})],le.prototype,"geometry",void 0),r([T("geometry")],le.prototype,"writeGeometry",null),r([l({type:Z.apiValues,json:{write:Z.write}})],le.prototype,"measureOperation",null),r([l({json:{read:!0}})],le.prototype,"is3D",void 0),r([l({type:String,json:{read:ve.read,write:ve.write}})],le.prototype,"linearUnit",void 0),r([l({type:String,json:{read:st.read,write:st.write}})],le.prototype,"areaUnit",void 0),le=Rt=r([v("esri.rest.support.ImageAreaParameters")],le);const _r=le;let Ve=class extends j{constructor(i){super(i),this.name=null,this.sensorName=null}};r([l({type:String,json:{read:!0,write:!0}})],Ve.prototype,"name",void 0),r([l({type:String,json:{read:!0,write:!0}})],Ve.prototype,"sensorName",void 0),Ve=r([v("esri.rest.support.BaseImageMeasureResult")],Ve);const lt=Ve;let Je=class extends lt{constructor(){super(...arguments),this.area=null,this.perimeter=null}};r([l({type:Ze,json:{read:!0,write:!0}})],Je.prototype,"area",void 0),r([l({type:$e,json:{read:!0,write:!0}})],Je.prototype,"perimeter",void 0),Je=r([v("esri.rest.support.ImageAreaResult")],Je);const Or=Je;let Ke=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.outSpatialReference=null}};r([l({type:re,json:{name:"outSR",write:!0}})],Ke.prototype,"outSpatialReference",void 0),Ke=r([v("esri.rest.support.ImageBoundaryParameters")],Ke);const Cr=Ke;let Pe=class extends j{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(i,a){return i==null?null:i.rings?ht.fromJSON(i):Le.fromJSON(i)}};r([l({type:Number,json:{write:!0}})],Pe.prototype,"area",void 0),r([l({json:{name:"shape",write:!0}})],Pe.prototype,"geometry",void 0),r([q("geometry")],Pe.prototype,"readGeometry",null),Pe=r([v("esri.rest.support.ImageBoundaryResult")],Pe);const $r=Pe;var vt;let ie=vt=class extends ot{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=s.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new vt(M({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({type:V,json:{read:!0,write:!0}})],ie.prototype,"fromGeometry",void 0),r([T("fromGeometry")],ie.prototype,"writeFromGeometry",null),r([l({type:V,json:{read:!0,write:!0}})],ie.prototype,"toGeometry",void 0),r([l({type:Z.apiValues,json:{write:Z.write}})],ie.prototype,"measureOperation",null),r([l({json:{read:!0}})],ie.prototype,"is3D",void 0),r([l({type:String,json:{read:ve.read,write:ve.write}})],ie.prototype,"linearUnit",void 0),r([l({type:String,json:{read:nt.read,write:nt.write}})],ie.prototype,"angularUnit",void 0),ie=vt=r([v("esri.rest.support.ImageDistanceParameters")],ie);const Ar=ie;let _e=class extends lt{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};r([l({type:$e,json:{read:!0,write:!0}})],_e.prototype,"distance",void 0),r([l({type:ze,json:{read:!0,write:!0}})],_e.prototype,"azimuthAngle",void 0),r([l({type:ze,json:{read:!0,write:!0}})],_e.prototype,"elevationAngle",void 0),_e=r([v("esri.rest.support.ImageDistanceResult")],_e);const Mr=_e;let ue=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(i,a,e){i!=null&&(a.geometryType=ee(i),a[e]=JSON.stringify(i.toJSON()))}};r([l({types:ae,json:{read:te,write:!0}})],ue.prototype,"geometry",void 0),r([T("geometry")],ue.prototype,"writeGeometry",null),r([l({json:{write:!0}})],ue.prototype,"objectIds",void 0),r([Kt(Xt,{ignoreUnknown:!1,name:"spatialRel"})],ue.prototype,"spatialRelationship",void 0),r([l({type:Tt,json:{name:"time",write:!0}})],ue.prototype,"timeExtent",void 0),r([l({type:String,json:{write:!0}})],ue.prototype,"where",void 0),ue=r([v("esri.rest.support.ImageGPSInfoParameters")],ue);const Vr=ue;let Xe=class extends Ht(j){constructor(){super(...arguments),this.id=null}};r([l({json:{write:!0}})],Xe.prototype,"id",void 0),Xe=r([v("esri.rest.support.CameraInfo")],Xe);const Jr=Xe;let X=class extends j{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(i,a){a.acquisitionDate=i==null?void 0:i.getTime()}};r([l({json:{write:!0}})],X.prototype,"id",void 0),r([l({json:{write:!0}})],X.prototype,"name",void 0),r([l({type:Date,json:{write:!0}})],X.prototype,"acquisitionDate",void 0),r([T("acquisitionDate")],X.prototype,"writeAcquisitionDate",null),r([l({json:{write:!0}})],X.prototype,"cameraID",void 0),r([l({type:V,json:{write:!0}})],X.prototype,"center",void 0),r([l({json:{write:!0}})],X.prototype,"gps",void 0),r([l({json:{write:!0}})],X.prototype,"orientation",void 0),X=r([v("esri.rest.support.ImageGPSInfo")],X);const Er=X;let Ee=class extends j{constructor(){super(...arguments),this.images=null,this.cameras=null}};r([l({type:[Er],json:{write:!0}})],Ee.prototype,"images",void 0),r([l({type:[Jr],json:{write:!0}})],Ee.prototype,"cameras",void 0),Ee=r([v("esri.rest.support.ImageGPSInfoResult")],Ee);const qr=Ee;var bt;let pe=bt=class extends ot{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=s.toJSON())}get measureOperation(){return this.operationType}clone(){return new bt(M({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({type:V,json:{read:!0}})],pe.prototype,"fromGeometry",void 0),r([T("fromGeometry")],pe.prototype,"writeFromGeometry",null),r([l({type:V,json:{read:!0,write:!0}})],pe.prototype,"toGeometry",void 0),r([l({type:Z.apiValues,json:{write:Z.write}})],pe.prototype,"measureOperation",null),r([l({json:{read:!0}})],pe.prototype,"operationType",void 0),r([l({type:String,json:{read:ve.read,write:ve.write}})],pe.prototype,"linearUnit",void 0),pe=bt=r([v("esri.rest.support.ImageHeightParameters")],pe);const Gr=pe;let Ye=class extends lt{constructor(){super(...arguments),this.height=null}};r([l({type:$e,json:{read:!0,write:!0}})],Ye.prototype,"height",void 0),Ye=r([v("esri.rest.support.ImageHeightResult")],Ye);const Lr=Ye;var St;let $=St=class extends j{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=JSON.stringify(s.toJSON()))}set mosaicRule(s){let i=s;i!=null&&i.mosaicMethod&&(i=W.fromJSON({...i.toJSON(),mosaicMethod:i.mosaicMethod,mosaicOperation:i.mosaicOperation})),this._set("mosaicRule",i)}writeMosaicRule(s,i,a){s!=null&&(i[a]=JSON.stringify(s.toJSON()))}set rasterFunction(s){let i=s;i!=null&&i.rasterFunction&&(i=F.fromJSON({...i.toJSON(),rasterFunction:i.rasterFunction,rasterFunctionArguments:i.rasterFunctionArguments})),this._set("rasterFunction",i)}writeRasterFunction(s,i,a){s!=null&&(i[a]=JSON.stringify(s.toJSON())),s.rasterFunctionDefinition&&(i[a]=JSON.stringify(s.rasterFunctionDefinition))}writeRasterFunctions(s,i,a){s!=null&&(i[a]=JSON.stringify(s.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(s,i,a){s!=null&&(i[a]=JSON.stringify(s))}writeTimeExtent(s,i,a){if(s!=null){const e=s.start!=null?s.start.getTime():null,t=s.end!=null?s.end.getTime():null;i[a]=e!=null?t!=null?`${e},${t}`:`${e}`:null}}clone(){return new St(M({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};r([l({json:{write:!0}})],$.prototype,"geometry",void 0),r([T("geometry")],$.prototype,"writeGeometry",null),r([l({type:W,json:{write:!0}})],$.prototype,"mosaicRule",null),r([T("mosaicRule")],$.prototype,"writeMosaicRule",null),r([l({type:F,json:{write:!0,name:"renderingRule"}})],$.prototype,"rasterFunction",null),r([T("rasterFunction")],$.prototype,"writeRasterFunction",null),r([l({type:[F],json:{write:!0,name:"renderingRules"}})],$.prototype,"rasterFunctions",void 0),r([T("rasterFunctions")],$.prototype,"writeRasterFunctions",null),r([l({type:V,json:{write:!0}})],$.prototype,"pixelSize",void 0),r([T("pixelSize")],$.prototype,"writePixelSize",null),r([l({type:Boolean,json:{write:!0}})],$.prototype,"returnGeometry",void 0),r([l({type:Boolean,json:{write:!0}})],$.prototype,"returnCatalogItems",void 0),r([l({type:Boolean,json:{write:!0}})],$.prototype,"returnPixelValues",void 0),r([l({type:Number,json:{write:!0}})],$.prototype,"maxItemCount",void 0),r([l({type:Tt,json:{write:{target:"time"}}})],$.prototype,"timeExtent",void 0),r([T("timeExtent")],$.prototype,"writeTimeExtent",null),r([l({json:{write:!0}})],$.prototype,"raster",void 0),r([l({json:{write:!0}})],$.prototype,"viewId",void 0),r([l({type:Boolean,json:{write:!0}})],$.prototype,"processAsMultidimensional",void 0),$=St=r([v("esri.rest.support.ImageIdentifyParameters")],$);const Bt=$;let Y=class extends j{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};r([l({json:{write:!0}})],Y.prototype,"catalogItemVisibilities",void 0),r([l({type:Vt,json:{write:!0}})],Y.prototype,"catalogItems",void 0),r([l({type:V,json:{write:!0}})],Y.prototype,"location",void 0),r([l({json:{write:!0}})],Y.prototype,"name",void 0),r([l({json:{write:!0}})],Y.prototype,"objectId",void 0),r([l({json:{write:!0}})],Y.prototype,"processedValues",void 0),r([l({json:{write:!0}})],Y.prototype,"properties",void 0),r([l({json:{write:!0}})],Y.prototype,"value",void 0),Y=r([v("esri.rest.support.ImageIdentifyResult")],Y);const Ur=Y;var xt;let Oe=xt=class extends j{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(s,i,a){i.geometries={geometryType:"esriGeometryPoint",geometries:s.map(e=>e.toJSON())}}clone(){var s;return new xt({geometries:((s=this.geometries)==null?void 0:s.map(i=>i.clone()))??[],rasterId:this.rasterId})}};r([l({type:[V],json:{write:!0}})],Oe.prototype,"geometries",void 0),r([T("geometries")],Oe.prototype,"writeGeometry",null),r([l({type:He,json:{write:!0}})],Oe.prototype,"rasterId",void 0),Oe=xt=r([v("esri.rest.support.ImagePixelLocationParameters")],Oe);const zr=Oe;let et=class extends j{constructor(){super(...arguments),this.geometries=null}};r([l({json:{write:!0}})],et.prototype,"geometries",void 0),et=r([v("esri.rest.support.ImagePixelLocationResult")],et);const Hr=et;var It;let Ie=It=class extends ot{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=s.toJSON())}get measureOperation(){const{is3D:s,geometry:i}=this;return i.type==="point"?s?"point-3D":"point":s?"centroid-3D":"centroid"}clone(){return new It(M({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([l({types:ae,json:{name:"fromGeometry",read:te}})],Ie.prototype,"geometry",void 0),r([T("geometry")],Ie.prototype,"writeGeometry",null),r([l({type:Z.apiValues,json:{read:Z.read,write:Z.write}})],Ie.prototype,"measureOperation",null),r([l({json:{read:!0}})],Ie.prototype,"is3D",void 0),Ie=It=r([v("esri.rest.support.ImagePointParameters")],Ie);const Br=Ie;let tt=class extends lt{constructor(){super(...arguments),this.point=null}};r([l({type:V,json:{name:"point.value",read:!0,write:!0}})],tt.prototype,"point",void 0),tt=r([v("esri.rest.support.ImagePointResult")],tt);const Qr=tt;var Ft;let z=Ft=class extends j{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=s.toJSON())}set locations(s){if(s!=null&&s.length){const i=new Yt({spatialReference:s[0].spatialReference,points:s.map(({x:a,y:e})=>[a,e])});this._set("locations",s),this.geometry=i}}clone(){return new Ft(M({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};r([l({types:ae,json:{read:te}})],z.prototype,"geometry",void 0),r([T("geometry")],z.prototype,"writeGeometry",null),r([l()],z.prototype,"locations",null),r([l({type:String,json:{type:Re.jsonValues,read:Re.read,write:Re.write}})],z.prototype,"interpolation",void 0),r([l({type:W,json:{write:!0}})],z.prototype,"mosaicRule",void 0),r([l({type:[String],json:{write:!0}})],z.prototype,"outFields",void 0),r([l({type:V,json:{write:!0}})],z.prototype,"pixelSize",void 0),r([l({type:String,json:{write:!0}})],z.prototype,"raster",void 0),r([l({type:Boolean,json:{write:!0}})],z.prototype,"returnFirstValueOnly",void 0),r([l({type:Number,json:{write:!0}})],z.prototype,"sampleDistance",void 0),r([l({type:Number,json:{write:!0}})],z.prototype,"sampleCount",void 0),r([l({type:Number,json:{write:!0}})],z.prototype,"sliceId",void 0),r([l({type:Tt,json:{read:{source:"time"},write:{target:"time"}}})],z.prototype,"timeExtent",void 0),z=Ft=r([v("esri.rest.support.ImageSampleParameters")],z);const kr=z;let ce=class extends j{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};r([l({json:{write:!0}})],ce.prototype,"attributes",void 0),r([l({type:V,json:{write:!0}})],ce.prototype,"location",void 0),r([l({json:{write:!0}})],ce.prototype,"locationId",void 0),r([l({json:{write:!0}})],ce.prototype,"rasterId",void 0),r([l({json:{write:!0}})],ce.prototype,"resolution",void 0),r([l({json:{write:!0}})],ce.prototype,"pixelValue",void 0),ce=r([v("esri.rest.support.ImageSample")],ce);const Wr=ce;let it=class extends j{constructor(){super(...arguments),this.samples=null}};r([l({type:[Wr],json:{write:!0}})],it.prototype,"samples",void 0),it=r([v("esri.rest.support.ImageSampleResult")],it);const Zr=it;let Fe=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(i,a,e){a.geometries=i!=null&&i.length?{geometryType:ee(i[0]),geometries:i.map(t=>({...t.toJSON(),spatialReference:void 0}))}:null}};r([l({types:[ae]})],Fe.prototype,"geometries",void 0),r([T("geometries")],Fe.prototype,"writeGeometries",null),r([l({type:[He],json:{write:!0}})],Fe.prototype,"rasterIds",void 0),r([l({type:re,json:{name:"outSR",write:!0}})],Fe.prototype,"outSpatialReference",void 0),Fe=r([v("esri.rest.support.ImageToMapMultirayParameters")],Fe);const Kr=Fe;let me=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(i,a,e){i!=null&&(a.geometryType=ee(i),a[e]={...i.toJSON(),spatialReference:void 0})}};r([l({types:ae,json:{read:te,write:!0}})],me.prototype,"geometry",void 0),r([T("geometry")],me.prototype,"writeGeometry",null),r([l({json:{write:!0}})],me.prototype,"rasterId",void 0),r([l({type:re,json:{name:"outSR",write:!0}})],me.prototype,"outSpatialReference",void 0),r([l({json:{name:"options.DOff",write:!0}})],me.prototype,"depthOffset",void 0),r([l({json:{name:"options.Adjust",write:!0}})],me.prototype,"adjust",void 0),me=r([v("esri.rest.support.ImageToMapParameters")],me);const Xr=me;let qe=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};r([l({type:String,json:{name:"uri",write:!0}})],qe.prototype,"referenceUri",void 0),r([l({type:Number,json:{write:!0}})],qe.prototype,"rasterId",void 0),qe=r([v("esri.rest.support.ImageUrlParameters")],qe);const Yr=qe;let rt=class extends j{constructor(){super(...arguments),this.url=null}};r([l({json:{name:"imageURL",write:!0}})],rt.prototype,"url",void 0),rt=r([v("esri.rest.support.ImageUrlResult")],rt);const es=rt;let De=class extends be.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]=JSON.stringify(s))}};r([l({types:ae,json:{read:te,write:!0}})],De.prototype,"geometry",void 0),r([T("geometry")],De.prototype,"writeGeometry",null),r([l({json:{write:!0}})],De.prototype,"rasterId",void 0),r([l({json:{name:"options.VisibleOnly",write:!0}})],De.prototype,"visibleOnly",void 0),De=r([v("esri.rest.support.MapToImageParameters")],De);const ts=De;let fe=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(i,a){return i.spatialReference||(i={...i,spatialReference:a.Shape.spatialReference}),V.fromJSON(i)}};r([l({types:ae,json:{name:"Shape",read:te,write:!0}})],fe.prototype,"geometry",void 0),r([l({json:{name:"Length",write:!0}})],fe.prototype,"length",void 0),r([l({json:{name:"Area",write:!0}})],fe.prototype,"area",void 0),r([l({json:{name:"Center",write:!0}})],fe.prototype,"center",void 0),r([q("center")],fe.prototype,"readCenter",null),fe=r([v("esri.rest.support.MeasureAreaFromImageResult")],fe);const is=fe;var Dt;let Ce=Dt=class extends j{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(s,i,a){s!=null&&(i.geometryType=ee(s),i[a]={...s.toJSON(),spatialReference:void 0})}clone(){const s=M({geometry:this.geometry,rasterId:this.rasterId});return new Dt(s)}};r([l({types:ae,json:{name:"fromGeometry",read:te,write:!0}})],Ce.prototype,"geometry",void 0),r([T("geometry")],Ce.prototype,"writeGeometry",null),r([l({json:{write:!0}})],Ce.prototype,"rasterId",void 0),Ce=Dt=r([v("esri.rest.support.MeasureFromImageParameters")],Ce);const rs=Ce;let Ge=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null}};r([l({types:ae,json:{name:"Shape",read:te,write:!0}})],Ge.prototype,"geometry",void 0),r([l({json:{name:"Length",write:!0}})],Ge.prototype,"length",void 0),Ge=r([v("esri.rest.support.MeasureLengthFromImageResult")],Ge);const ss=Ge;function jt(s){const i=s==null?void 0:s.time;if(i&&(i.start!=null||i.end!=null)){const a=[];i.start!=null&&a.push(i.start),i.end==null||a.includes(i.end)||a.push(i.end),s.time=a.join(",")}}async function Qt(s,i,a){i=J(ji,i);const e=G(s),t=i.geometry?[i.geometry]:[],n=await je(t),o=i.toJSON();jt(o);const u=n==null?void 0:n[0];u!=null&&(o.geometry=ne(u));const p=H({...e.query,f:"json",...o});return B(p,a)}async function ns(s,i,a){var p,m,c;const e=(i=J(Nr,i)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),(m=(p=i==null?void 0:i.point)==null?void 0:p.spatialReference)!=null&&m.imageCoordinateSystem&&(e.point.spatialReference=pt(i.point.spatialReference)),(c=i==null?void 0:i.spatialReference)!=null&&c.imageCoordinateSystem&&(e.spatialReference=Ae(i.spatialReference));const t=G(s),n=H({...t.query,f:"json",...e}),o=B(n,a),{data:u}=await D(`${t.path}/computeAngles`,o);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new re({wkid:0,imageCoordinateSystem:u.spatialReference}):re.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Pr(u)}async function as(s,i,a){var m;const e=(i=J(zr,i)).toJSON(),{geometries:t}=i;if(t)for(let c=0;c<t.length;c++)(m=t[c].spatialReference)!=null&&m.imageCoordinateSystem&&(e.geometries.geometries[c].spatialReference=pt(t[c].spatialReference));const n=G(s),o=H({...n.query,f:"json",...e}),u=B(o,a),{data:p}=await D(`${n.path}/computePixelLocation`,u);return Hr.fromJSON(p)}async function os(s,i,a){const e=await Qt(s,i,a),t=G(s),{data:n}=await D(`${t.path}/computeStatisticsHistograms`,e),{statistics:o}=n;return o!=null&&o.length&&o.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:o,histograms:n.histograms}}async function ls(s,i,a){const e=await Qt(s,i,a),t=G(s),{data:n}=await D(`${t.path}/computeHistograms`,e);return{histograms:n.histograms}}async function us(s,i,a){var d,h;const e=(i=J(kr,i)).toJSON();jt(e),(d=e.outFields)!=null&&d.length&&(e.outFields=e.outFields.join(","));const t=await je(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ne(n));const o=G(s),u=H({...o.query,f:"json",...e}),p=B(u,a),{data:m}=await D(`${o.path}/getSamples`,p),c=(h=m==null?void 0:m.samples)==null?void 0:h.map(g=>{const w=g.value==="NaN"||g.value===""?null:g.value.split(" ").map(f=>Number(f));return{...g,pixelValue:w}});return Zr.fromJSON({samples:c})}async function Mt(s,i,a){i=J(Bt,i);const e=G(s),t=i.geometry?[i.geometry]:[];return je(t).then(n=>{const o=i.toJSON(),u=n==null?void 0:n[0];u!=null&&(o.geometry=JSON.stringify(ne(u)));const p=H({...e.query,f:"json",...o}),m=B(p,a);return D(e.path+"/identify",m)}).then(n=>Ur.fromJSON(n.data))}async function ps(s,i,a){i=J(Gr,i);const e=await ut(s,i,[i.fromGeometry,i.toGeometry],a);return Lr.fromJSON(e)}async function cs(s,i,a){i=J(_r,i);const e=await ut(s,i,[i.geometry],a);return Or.fromJSON(e)}async function ms(s,i,a){i=J(Br,i);const e=await ut(s,i,[i.geometry],a);return Qr.fromJSON(e)}async function ds(s,i,a){i=J(Ar,i);const e=await ut(s,i,[i.fromGeometry,i.toGeometry],a);return Mr.fromJSON(e)}async function ut(s,i,a,e){const t=G(s),n=await je(a),o=i.toJSON();n[0]!=null&&(o.fromGeometry=JSON.stringify(ne(n[0]))),n[1]!=null&&(o.toGeometry=JSON.stringify(ne(n[1])));const u=H({...t.query,f:"json",...o}),p=B(u,e),{data:m}=await D(t.path+"/measure",p);return m}async function ys(s,i,a){const e=await kt(s,i,a);return ss.fromJSON(e)}async function hs(s,i,a){const e=await kt(s,i,a);return is.fromJSON(e)}async function kt(s,i,a){i=J(rs,i);const e=G(s),t=i.toJSON(),n=H({...e.query,f:"json",...t}),o=B(n,a),{data:u}=await D(e.path+"/measureFromImage",o);return u}function ne(s){var a;const i=s.toJSON();return(a=s.spatialReference)!=null&&a.imageCoordinateSystem&&(i.spatialReference=pt(s.spatialReference)),i}function pt(s){const{imageCoordinateSystem:i}=s;if(i){const{id:a,referenceServiceName:e}=i;return a!=null?e?{icsid:a,icsns:e}:{icsid:a}:{ics:i}}return s.toJSON()}function Ae(s,i){if(!s.imageCoordinateSystem)return gt(s);const a=pt(s),{icsid:e,icsns:t}=a;return e==null||t!=null&&!(i!=null&&i.toLowerCase().includes("/"+t.toLowerCase()+"/"))?JSON.stringify(a):`0:${e}`}async function gs(s,i,a){i=J(Cr,i);const e=G(s),t=i.toJSON();i.outSpatialReference&&(t.outSR=Ae(i.outSpatialReference));const n=H({...e.query,f:"json",...t}),o=B(n,a),{data:u}=await D(e.path+"/queryBoundary",o);return $r.fromJSON(u)}async function fs(s,i,a){var d,h;const e=(i=J(Vr,i)).toJSON();jt(e),(d=e.objectIds)!=null&&d.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const t=await je(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ne(n));const o=(n==null?void 0:n.spatialReference)??((h=i.geometry)==null?void 0:h.spatialReference);o&&(e.inSR=Ae(o));const u=G(s),p=H({...u.query,f:"json",...e}),m=B(p,a),{data:c}=await D(`${u.path}/queryGPSInfo`,m);return qr.fromJSON(c)}async function ws(s,i,a){const e=(i=J(Xr,i)).toJSON();i.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=ne(i.geometry)),i.depthOffset&&i.adjust||delete e.options;const t=G(s),n=H({...t.query,f:"json",...e}),o=B(n,a),{data:u}=await D(`${t.path}/imageToMap`,o);return te(u)}async function Rs(s,i,a){var p;const e=(i=J(Kr,i)).toJSON();(p=i.rasterIds)!=null&&p.length&&(e.rasterIds=i.rasterIds.join(","));const t=G(s),n=H({...t.query,f:"json",...e}),o=B(n,a),{data:u}=await D(`${t.path}/imageToMapMultiray`,o);return te(u)}async function vs(s,i,a){var d;const e=(i=J(ts,i)).toJSON(),t=await je(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ne(n)),i.visibleOnly||delete e.options;const o=(n==null?void 0:n.spatialReference)??((d=i.geometry)==null?void 0:d.spatialReference);o&&(e.inSR=Ae(o));const u=G(s),p=H({...u.query,f:"json",...e}),m=B(p,a),{data:c}=await D(`${u.path}/mapToImage`,m);return te(c)}async function bs(s,i,a){const e=(i=J(Yr,i)).toJSON(),t=G(s),n=H({...t.query,f:"json",...e}),o=B(n,a),{data:u}=await D(`${t.path}/getImageUrl`,o);return es.fromJSON(u)}async function Ss(s,i,a){var m;const e=(i=J(Dr,i)).toJSON(),t=await je([i.fromGeometry,i.toGeometry]);t[0]!=null&&(e.fromGeometry=ne(t[0]),t[0].spatialReference&&(e.inSR=Ae(t[0].spatialReference))),t[1]!=null&&(e.toGeometry=ne(t[1])),(m=i.objectIds)!=null&&m.length&&(e.objectIds=e.objectIds.join(","));const n=G(s),o=H({...n.query,f:"json",...e}),u=B(o,a),{data:p}=await D(`${n.path}/find`,u);return jr.fromJSON(p)}async function xs(s,i,a){var N,L;const e=G(s),t=H({...e==null?void 0:e.query,f:"json"}),n=B(t,a),o=`${e==null?void 0:e.path}/${i}/info`,u=D(`${o}`,n),p=D(`${o}/keyProperties`,n),m=await Promise.allSettled([u,p]),c=m[0].status==="fulfilled"?m[0].value.data:null,d=m[1].status==="fulfilled"?m[1].value.data:null;let h=null;(N=c.statistics)!=null&&N.length&&(h=c.statistics.map(_=>({min:_[0],max:_[1],avg:_[2],stddev:_[3]})));const g=Le.fromJSON(c.extent),w=Math.ceil(g.width/c.pixelSizeX-.1),f=Math.ceil(g.height/c.pixelSizeY-.1),y=g.spatialReference,R=new V({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:y}),I=(L=c.histograms)!=null&&L.length?c.histograms:null,S=new nr({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new qt({width:w,height:f,bandCount:c.bandCount,extent:g,spatialReference:y,pixelSize:R,pixelType:c.pixelType.toLowerCase(),statistics:h,histograms:I,keyProperties:d,storageInfo:S})}const Is=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Fs=li(ui,{min:0,max:255});function Ds(s){const i=JSON.stringify(s),a=i.includes('"rasterFunctionDefinition":{'),e=a?i.match(/"type":"(.*?FunctionArguments")/gi):i.match(/"rasterFunction":"(.*?")/gi),t=e==null?void 0:e.map(n=>a?n.slice(8,-18):n.slice(18,-1));return t?t.join("/"):null}const Ts=s=>{let i=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new C({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,n){e!=null&&this.format!=="lerc"&&(t[n]=e)}writeCompressionTolerance(e,t,n){this.format==="lerc"&&e!=null&&(t[n]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?W.fromJSON(t):null}get fieldsIndex(){return this.fields?new ri(this.fields):null}set format(e){e&&Is.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t!=null&&t.mosaicMethod&&(t=W.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const n=e||t.mosaicRule;return n?W.fromJSON(n):this._isMosaicRuleSupported(t)?W.fromJSON(t):null}writeMosaicRule(e,t,n){let o=this.mosaicRule;const u=this.definitionExpression;o?u&&u!==o.where&&(o=o.clone(),o.where=u):u&&(o=new W({where:u})),this._isValidCustomizedMosaicRule(o)&&(t[n]=o.toJSON())}writeNoData(e,t,n){e!=null&&typeof e=="number"&&(t[n]=Fs(e))}readObjectIdField(e,t){if(!e){const n=t.fields.find(o=>o.type==="esriFieldTypeOID"||o.type==="oid");e=n==null?void 0:n.name}return e}get parsedUrl(){return si(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const n=t==null?void 0:t.find(({name:o})=>o===e);return n==null?void 0:n.renderer.clone()}return this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,n){var p,m;const o=(m=(p=t==null?void 0:t.layerDefinition)==null?void 0:p.drawingInfo)==null?void 0:m.renderer,u=Oi(o,n);return u==null?null:(u.type==="vector-field"&&t.symbolTileSize&&!o.symbolTileSize&&(u.symbolTileSize=t.symbolTileSize),Gt(u)||_t.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,t,n){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){var o,u,p,m,c;const e=((o=this.fields)==null?void 0:o.map(d=>d.clone()))??[];e.push(Ei()),(u=this.capabilities)!=null&&u.operations.supportsQuery&&((p=this.fields)!=null&&p.length)&&e.push(qi()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:d})=>d.toLowerCase()==="none")&&e.push(Gi()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:d})=>d.toLowerCase()!=="none").forEach(({name:d})=>e.push(Li(d)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const d=(c=(m=t==null?void 0:t.multidimensionalInfo)==null?void 0:m.variables[0].unit)==null?void 0:c.trim(),h=Ui(d),g=zi();e.push(h,g)}if(t!=null&&t.multidimensionalInfo&&this.sourceType==="raster-dataset"){const d=Hi(t.multidimensionalInfo);e.push(...d)}const n=t==null?void 0:t.attributeTable;if(n!=null){const d=Bi(n);e.push(...d)}return e}set rasterFunction(e){let t=e;t!=null&&t.rasterFunction&&(t=F.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const n=t.rasterFunctionInfos;return t.renderingRule||n!=null&&n.length&&n[0].name!=="None"?this._isRFTJson(t.renderingRule)?F.fromJSON({rasterFunctionDefinition:t.renderingRule}):F.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const n=e||t.extent.spatialReference;return n?re.fromJSON(n):null}readPixelType(e){return mt.fromJSON(e)||e}writePixelType(e,t,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[n]=mt.toJSON(e))}readVersion(e,t){let n=t.currentVersion;return n||(n=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let n=e;const{renderer:o,symbolizer:u,pixelFilter:p,bandIds:m}=this;if(!this._isPicture()&&o&&u&&!p){const c=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(o.toJSON()),d=this._rasterJobHandler.instance;if(d){c&&(u.bind(),await d.updateSymbolizer(u,t),this._cachedRendererJson=o.toJSON());const h=await d.symbolize({bandIds:m,...e},t);n={extent:e.extent,pixelBlock:h}}else n={extent:e.extent,pixelBlock:u.symbolize({bandIds:m,...e})}}return n}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async computeAngles(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeAngles)throw new x("imagery-layer:compute-angles","this operation is not supported on the input image service");return ns(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputePixelLocation)throw new x("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return as(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeHistograms)throw new x("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),ls(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeStatisticsHistograms)throw new x("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),os(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new x("imagery-layer:measure-height","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),ps(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),cs(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),ds(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new x("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),ms(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new x("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new x("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return ys(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new x("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new x("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return hs(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t!=null?t.get(e):void 0}getFieldDomain(e,t){const n=this.getField(e);return n?n.domain:null}async fetchImage(e,t,n,o={}){if(e==null||t==null||n==null)throw new x("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const d=await this._generateRasterInfo(this.rasterFunction,{signal:o.signal});d&&(this.rasterInfo=d)}const u=this.getExportImageServiceParameters(e,t,n,o.timeExtent);if(u==null){if(o.requestAsImageElement&&this._canRequestImageElement(this.format)){const R=document.createElement("canvas");return R.width=t,R.height=n,o.returnImageBitmap?{imageBitmap:await Ct(R,`${a(this.parsedUrl)}/exportImage`,o.signal)}:{imageOrCanvasElement:R}}const{bandIds:d,rasterInfo:h}=this,g=((d==null?void 0:d.length)||h.bandCount)??0,w=t*n,f=h.pixelType,y=[];for(let R=0;R<g;R++)y.push(yt.createEmptyBand(f,w));return{pixelData:{pixelBlock:new yt({width:t,height:n,pixels:y,mask:new Uint8Array(w),pixelType:f}),extent:e}}}const p=!!o.requestAsImageElement&&!this.pixelFilter,m=p&&!!o.returnImageBitmap,c={imageServiceParameters:u,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:p,returnImageBitmap:m,signal:o.signal};return this._requestArrayBuffer(c)}fetchKeyProperties(e){return D(a(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new x("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):D(a(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>Vt.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const n={...t,query:this._getQueryParams()};return xs(a(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,t){var Se,ye,oe,Nt,Pt;const{data:n}=await D(a(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),o=n==null?void 0:n.ics;if(!o)return;let u=null;try{u=(await D(a(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!(u!=null&&u.spatialReference))return{ics:o,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?D(a(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(b=>b.data).catch(()=>({})):{},m=u.spatialReference,c={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:gt(m),outSR:"0:"+e},d=D(a(this.parsedUrl)+"/project",{query:this._getQueryParams(c),...t}).then(b=>b.data).catch(()=>({})),h=5,g=(u.xmin+u.xmax)/2,w=(u.ymax-u.ymin)/(h+1),f=u.ymin+w,y=[];for(let b=0;b<h;b++)y.push({x:g,y:f+w*b});const R={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:y}),inSR:gt(m),outSR:"0:"+e},I=D(a(this.parsedUrl)+"/project",{query:this._getQueryParams(R),...t}).then(b=>b.data).catch(()=>({})),S=await Promise.all([p,d,I]);let N=S[0].ipxf;if(N==null){const b=(Se=o.geodataXform)==null?void 0:Se.xf_0;((ye=b==null?void 0:b.name)==null?void 0:ye.toLowerCase())==="topup"&&((oe=b==null?void 0:b.coefficients)==null?void 0:oe.length)===6&&(N={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:b.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const L=Le.fromJSON((Pt=(Nt=S[1])==null?void 0:Nt.geometries)==null?void 0:Pt[0]);L&&(L.spatialReference=new re({wkid:0,imageCoordinateSystem:o}));const _=S[2].geometries?S[2].geometries.filter(b=>(b==null?void 0:b.x)!=null&&b.y!=null&&b.x!=="NaN"&&b.y!=="NaN"):[],A=_.length;if(A<3)return{ics:o,icsToPixelTransform:N,icsExtent:L,northDirection:null};let Q=0,O=0,P=0,E=0;for(let b=0;b<A;b++)Q+=_[b].x,O+=_[b].y,P+=_[b].x*_[b].x,E+=_[b].x*_[b].y;const U=(A*E-Q*O)/(A*P-Q*Q);let de=0;const Be=_[h-1].x>_[0].x,Qe=_[h-1].y>_[0].y;return U===1/0?de=Qe?90:270:U===0?de=Be?0:180:U>0?de=Be?180*Math.atan(U)/Math.PI:180*Math.atan(U)/Math.PI+180:U<0&&(de=Qe?180+180*Math.atan(U)/Math.PI:360+180*Math.atan(U)/Math.PI),{ics:o,icsToPixelTransform:N,icsExtent:L,northDirection:de}}async generateRasterInfo(e,t){var p;e=J(F,e);const n={...t,query:this._getQueryParams()};if(!e||((p=e.functionName)==null?void 0:p.toLowerCase())==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??$t(a(this.parsedUrl),this.sourceJSON,n);const o=Ds(e);if(!o)throw new x("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[o])return this._functionRasterInfos[o];const u=lr(a(this.parsedUrl),e,n);this._functionRasterInfos[o]=u;try{return await u}catch(m){throw this._functionRasterInfos[o]=null,m}}getExportImageServiceParameters(e,t,n,o){var R,I;e=e.clone().shiftCentralMeridian();const u=Ae(e.spatialReference,a(this.parsedUrl));this.pixelType!==this.serviceRasterInfo.pixelType&&(this.exportImageServiceParameters.pixelType=this.pixelType);const p=this.exportImageServiceParameters.toJSON(),{bandIds:m,noData:c}=p;let{renderingRule:d}=p;const h=(R=this.rasterFunction)==null?void 0:R.rasterFunctionDefinition,g=(I=this.renderer)==null?void 0:I.type,w=!g||g==="raster-stretch"||g==="raster-colormap"||g==="unique-value"||g==="class-breaks"||g==="raster-shaded-relief";if(m!=null&&m.length&&this._hasRasterFunction(this.rasterFunction)&&!h&&w){const S={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:m}};if(d.rasterFunction==="Stretch")S.rasterFunctionArguments.Raster=d.rasterFunctionArguments.Raster,d.rasterFunctionArguments.Raster=S;else if(d.rasterFunction==="Colormap"){const N=d.rasterFunctionArguments.Raster;(N==null?void 0:N.rasterFunction)==="Stretch"?(S.rasterFunctionArguments.Raster=N.rasterFunctionArguments.Raster,N.rasterFunctionArguments.Raster=S):(S.rasterFunctionArguments.Raster=N,d.rasterFunctionArguments.Raster=S)}else S.rasterFunctionArguments.Raster=d,d=S;p.bandIds=void 0}else p.bandIds=m==null?void 0:m.join(",");Array.isArray(c)&&c.length>0&&(p.noData=c.join(","));const f=this._processMultidimensionalIntersection(null,o,this.exportImageServiceParameters.mosaicRule);if(f.isOutSide)return null;p.mosaicRule=f.mosaicRule!=null?JSON.stringify(f.mosaicRule):null,o=f.timeExtent,p.renderingRule=this._getRenderingRuleString(F.fromJSON(d));const y={};if(o!=null){const{start:S,end:N}=o.toJSON();S&&N&&S===N?y.time=""+S:S==null&&N==null||(y.time=`${S??"null"},${N??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:t+","+n,...p,...y}}async getSamples(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n!=null&&n.operations.supportsGetSamples))throw new x("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=M(e);const{raster:o}=this;return o&&e.raster==null&&(e.raster=o),us(this.url,e,this._getRequestOptions(t))}async identify(e,t){var p;if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsIdentify)throw new x("imagery-layer:identify","identify operation is not supported on the input image service");e=M(e),this.version<10.91&&((p=e.geometry)==null?void 0:p.type)==="extent"&&(e.geometry=ht.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new x("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:o,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),o&&e.raster==null&&(e.raster=o),Mt(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMap)throw new x("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return ws(a(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMapMultiray)throw new x("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Rs(a(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMapToImage)throw new x("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return vs(a(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsFindImages)throw new x("imagery-layer:find-images","findImages operation is not supported on the input image service");return Ss(a(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsGetImageUrl)throw new x("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return bs(a(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new ct({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryBoundary)throw new x("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},gs(a(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),ni(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),cr(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryGPSInfo)throw new x("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},fs(a(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),mr(this.url,e,t)}async queryVisibleRasters(e,t){var L,_,A,Q;if(!e)throw new x("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:o,returnTopmostRaster:u,showNoDataRecords:p}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,c=null,d=null;const h=Te.servicePixelValue.toLowerCase(),g=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some(O=>!O.toLowerCase().startsWith(h)),this.version>=10.4)){const O=e.outFields.filter(E=>E.toLowerCase().startsWith(h)&&E.length>h.length).map(E=>{const U=E.slice(h.length+1);return[this._updateRenderingRulesFunctionName(U,g),U]});c=O.map(E=>new F({functionName:E[0]})),d=O.map(E=>E[1]);const{rasterFunction:P}=this;c.length===0?P!=null&&P.functionName?(c.push(P),d.push(P.functionName)):c=null:P!=null&&P.functionName&&!c.some(E=>E.functionName===P.functionName)&&(c.push(P),d.push(P.functionName))}const w=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:f}=this;let y=e.timeExtent||this.timeExtent;if(f){const{isOutside:O,intersection:P}=dt(f,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:(L=this.exportImageServiceParameters.mosaicRule)==null?void 0:L.multidimensionalDefinition});if(O)throw new x("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");(P==null?void 0:P.timeExtent)!=null&&(y=P.timeExtent)}const R=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,y);let I=e.geometry;this.version<10.91&&(I==null?void 0:I.type)==="extent"&&(I=ht.fromExtent(I));const S=this._getQueryParams({geometry:I,timeExtent:y,mosaicRule:R,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:c,pixelSize:n,returnCatalogItems:m,returnGeometry:w,raster:this.raster,maxItemCount:u?1:null});delete S.f;const N=new Bt(S);try{await this._generateRasterInfo(this.rasterFunction);const O=await Mt(this.url,N,{signal:t==null?void 0:t.signal,query:{...this.customParameters}}),P=e.outFields,E=O.value!=null&&O.value.toLowerCase().includes("nodata");if(!(m&&!w&&((_=O==null?void 0:O.catalogItems)!=null&&_.features.length)&&(p||!E)))return this._processVisibleRastersResponse(O,{returnDomainValues:o,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:P});const U=this.objectIdField||"ObjectId",de=((A=O.catalogItems)==null?void 0:A.features)??[],Be=de.map(ye=>{var oe;return(oe=ye.attributes)==null?void 0:oe[U]}),Qe=new ct({objectIds:Be,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[U]}),Se=await this.queryRasters(Qe);return(Q=Se==null?void 0:Se.features)!=null&&Q.length&&Se.features.forEach(ye=>{de.forEach(oe=>{oe.attributes[U]===ye.attributes[U]&&ye.geometry&&(oe.geometry=ye.geometry.clone(),e.outSpatialReference!=null&&(oe.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(O,{returnDomainValues:o,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:P})}catch{throw new x("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const n=D(a(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>{var m;return(m=p.data)==null?void 0:m.statistics}),o=D(a(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>{var m;return(m=p.data)==null?void 0:m.histograms}),u=await Promise.all([n,o]);return u[0]&&u[0].forEach(p=>{p.avg=p.mean,p.stddev=p.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}async createFlowMesh(e,t){const n=this._rasterJobHandler.instance;return n?n.createFlowMesh(e,t):er(e.meshType,e.simulationSettings,e.flowData,t.signal!=null?t.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return Qi(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):$t(a(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),ur(p,t),p)),o=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([n,o,u]).then(p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),_t.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([ai(()=>this.rasterFunction,c=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(c).then(d=>{d&&(this.rasterInfo=d)})})]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)})}_combineMosaicRuleWithTimeExtent(e,t){var f;const n=this.timeInfo,{multidimensionalInfo:o}=this.serviceRasterInfo;if(e==null||o==null||t==null||(n==null?void 0:n.startField)==null)return e;const{startField:u}=n,p=o.variables.some(y=>y.dimensions.some(R=>R.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=(f=e.multidimensionalDefinition)==null?void 0:f.filter(y=>y.dimensionName!==p),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const m=e.multidimensionalDefinition.filter(y=>y.dimensionName===p),c=t.start!=null?t.start.getTime():null,d=t.end!=null?t.end.getTime():null,h=c==null||d==null||c===d,g=h?[c||d]:[[c,d]],w=this.version>=10.8;if(m.length)m.forEach(y=>{y.dimensionName===p&&(w?(y.dimensionName=null,y.isSlice=!1,y.values=[]):(y.isSlice=h,y.values=g))});else if(!w){const y=e.multidimensionalDefinition.filter(R=>R.variableName!=null&&R.dimensionName==null);y.length?y.forEach(R=>{R.dimensionName=p,R.isSlice=h,R.values=g}):e.multidimensionalDefinition.push(new ki({variableName:"",dimensionName:p,isSlice:h,values:g}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQuery)throw new x("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?J(ct,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new Ji;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&(t==null?void 0:t.bandCount)===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Ci(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var n;let t=this.sourceJSON;if(!t){const{data:o,ssl:u}=await D(a(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=o,this.sourceJSON=t,u&&(this.url=this.url.replace(/^http:/i,"https:"))}if(((n=t.capabilities)==null?void 0:n.toLowerCase().split(",").map(o=>o.trim()).indexOf("tilesonly"))>-1)throw new x("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":((t=e.fields)==null?void 0:t.length)>0}_isMosaicRuleSupported(e){var o;if(!e)return!1;const t=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(((o=e.fields)==null?void 0:o.length)>1);return t||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:n}=e,o=(t==null?void 0:t.toLowerCase())==="resample",u=(n==null?void 0:n.ResampleType)||(n==null?void 0:n.resampleType);return o&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){var o,u,p;const t=this._isPicture(),{rasterInfo:n}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const m=(u=(o=this.mosaicRule)==null?void 0:o.multidimensionalDefinition)==null?void 0:u[0].variableName,c=$i({variableName:m,rasterFunctionName:(p=this.rasterFunction)==null?void 0:p.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const h=(c==null?void 0:c.bandIds)??Ai(n);!h||n.bandCount===3&&h[0]===0&&h[1]===1&&h[2]===2||(this.bandIds=h)}e||(e=(c==null?void 0:c.renderer)??Mi(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:m}));const d=Vi(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=d,this.symbolizer.rasterInfo=n):this.symbolizer=new ar({rendererJSON:d,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){(e==null?void 0:e.renderingRule)!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:n}=this;return{raster:t,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e==null?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,n){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):Ot(e,t,n)}async _getRasterFunctionInfos(e){var n;const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(n=(await D(a(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data)==null?void 0:n.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:n,returnImageBitmap:o,signal:u}=e;if(n&&this._canRequestImageElement(t.format)){const f=`${a(this.parsedUrl)}/exportImage`,{data:y}=await D(f,{responseType:o?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return y instanceof Blob?{imageBitmap:await Ct(y,f,u),params:t}:{imageOrCanvasElement:y,params:t}}const p=this._initJobHandler(),m=D(a(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),c=(await Promise.all([m,p]))[0].data,d=t.format||"jpgpng";let h=d;if(h!=="bsq"&&h!=="bip"&&(h=or(c)),!h)throw new x("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(c)));const g={signal:u};return{pixelData:{pixelBlock:await(d==="gif"||d==="bmp"||d.includes("png")&&(h==="png"||h==="jpg")?Ot(c,{useCanvas:!0,...t},g):this._decodePixelBlock(c,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:d},g)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){var t;return e&&JSON.stringify(e.toJSON())!==JSON.stringify((t=this.defaultMosaicRule)==null?void 0:t.toJSON())}_updateMultidimensionalDefinition(e){var n;if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=Wi(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new W;const o=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&((n=this.rasterFunction.functionName)==null?void 0:n.toLowerCase())!=="none"&&t.forEach(u=>u.variableName=""),t=t.filter(({variableName:u,dimensionName:p})=>u&&u!=="*"||p),!(o!=null&&o.length)&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){var S,N,L,_;t=t||{};const n=e.value,{templateRRFunctionNames:o,showNoDataRecords:u,returnDomainValues:p,templateFields:m}=t,c=e.processedValues;let d=(S=e.catalogItems)==null?void 0:S.features,h=((L=(N=e.properties)==null?void 0:N.Values)==null?void 0:L.map(A=>A.replaceAll(/ /gi,", ")))||[];const g=this.objectIdField||"ObjectId",w=typeof n=="string"&&n.toLowerCase().includes("nodata"),f=[];if(n&&!d&&!w){const A={};A[g]=0,h=[n],d=[new oi({geometry:this.fullExtent,attributes:A})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&Zi(this.rasterFields,A,(_=this.mosaicRule)==null?void 0:_.multidimensionalDefinition)}if(!d)return[];let y,R,I;this._updateResponseFieldNames(d,m),w&&!u&&(d=[]);for(let A=0;A<d.length;A++){if(y=d[A],n!=null){if(R=h[A],I=this.rasterFunction&&c&&c.length>0&&o&&o.length>0&&o.includes(this.rasterFunction.functionName)?c[o.indexOf(this.rasterFunction.functionName)]:n,R.toLowerCase()==="nodata"&&!u)continue;const{itemPixelValue:Q,servicePixelValue:O}=Te;y.attributes[Q]=R,y.attributes[O]=I,this._updateFeatureWithMagDirValues(y,R);const P=this.fields&&this.fields.length>0;let E=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?P?R:n:I;this.rasterFunction||(E=P?R:n),this._updateFeatureWithRasterAttributeTableValues(y,E)}if(y.sourceLayer=y.layer=this,p&&this._updateFeatureWithDomainValues(y),o&&c&&o.length===c.length)for(let Q=0;Q<o.length;Q++){const O=`${Te.servicePixelValue}.${o[Q]}`;y.attributes[O]=c[Q]}f.push(d[A])}return f}_processMultidimensionalIntersection(e,t,n){const{multidimensionalSubset:o}=this;if(!o)return{isOutSide:!1,timeExtent:t,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,t)};if(o){const{isOutside:u,intersection:p}=dt(o,{geometry:e,timeExtent:t});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};(p==null?void 0:p.timeExtent)!=null&&(t=p.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,t),n==null?void 0:n.multidimensionalDefinition){const{isOutside:u}=dt(o,{multidimensionalDefinition:n.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,t){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:o,fields:u}=n,p=u.map(c=>c.name).find(c=>c.toLowerCase()==="value");if(!p)return;const m=o.filter(c=>c.attributes[p]===(t!=null?parseInt(t,10):null));m&&m[0]&&u.forEach(c=>{const d=Ki+c.name;e.attributes[d]=m[0].attributes[c.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const n=t.split(/,\s*/).map(c=>parseFloat(c)),o=n.map(c=>[c]),u=n.map(c=>({minValue:c,maxValue:c,noDataValue:null})),p=new yt({height:1,width:1,pixelType:"f32",pixels:o,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new Le(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:tr([p.pixels[0][0],p.pixels[1][0]]);e.attributes[Te.magnitude]=m[0],e.attributes[Te.direction]=m[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value");t!=null&&t.forEach(n=>{const o=e.attributes[n.name];if(o!=null){const u=n.domain.codedValues.find(p=>p.code===o);u&&(e.attributes[n.name]=u.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(o=>{var u;if(o!=null&&o.attributes)for(const p of t){const m=(u=n.get(p))==null?void 0:u.name;m&&m!==p&&(o.attributes[p]=o.attributes[m],delete o.attributes[m])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return(e==null?void 0:e.functionName)!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(n)?t.get(n):e}_isRFTJson(e){return(e==null?void 0:e.name)&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:n,rasterFunction:o}=this;o&&"rasterFunction"in e&&e.rasterFunction==null&&(e.rasterFunction=o),n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){var R;const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(I=>I.trim()):["image","catalog"],{currentVersion:n,advancedQueryCapabilities:o,maxRecordCount:u}=e,p=t.includes("image"),m=e.serviceDataType==="esriImageServiceDataTypeElevation",c=!(!e.spatialReference&&!((R=e.extent)!=null&&R.spatialReference)),d=t.includes("edit"),h=t.includes("mensuration")&&c,g=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(I=>I.trim()),w=h&&g.includes("basic"),f=this._isMosaicDataset(e)&&t.includes("catalog"),y=t.includes("download");return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:p,supportsExportImage:p,supportsIdentify:p,supportsImageToMap:n>=11.2&&f,supportsImageToMapMultiray:n>=11.2&&f,supportsMapToImage:n>=11.2&&f,supportsFindImages:n>=11.2&&f,supportsGetImageUrl:n>=11.3&&y,supportsMeasure:h,supportsMeasureFromImage:n>=11.2,supportsDownload:y,supportsQuery:f&&e.fields&&e.fields.length>0,supportsGetSamples:n>=10.2&&p,supportsProject:n>=10.3&&p,supportsComputeStatisticsHistograms:n>=10.4&&p,supportsQueryBoundary:n>=10.6&&p,supportsCalculateVolume:n>=10.7&&m,supportsComputePixelLocation:n>=10.7&&f,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&f,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,supportsStatistics:!!(o!=null&&o.supportsStatistics),supportsOrderBy:!!(o!=null&&o.supportsOrderBy),supportsDistinct:!!(o!=null&&o.supportsDistinct),supportsPagination:!!(o!=null&&o.supportsPagination),supportsStandardizedQueriesOnly:!!(o!=null&&o.useStandardizedQueries),supportsPercentileStatistics:!!(o!=null&&o.supportsPercentileStatistics),supportsCentroid:!!(o!=null&&o.supportsReturningGeometryCentroid),supportsCurrentUser:!1,supportsDistance:!!(o!=null&&o.supportsQueryWithDistance),supportsExtent:!!(o!=null&&o.supportsReturningQueryExtent),supportsGeometryProperties:!!(o!=null&&o.supportsReturningGeometryProperties),supportsHavingClause:!!(o!=null&&o.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!(o!=null&&o.supportsDefaultSR),supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:w,supportsAreaAndPerimeter:w,supportsPointOrCentroid:w,supportsHeightFromBaseAndTop:h&&g.includes("base-top height"),supportsHeightFromBaseAndTopShadow:h&&g.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:h&&g.includes("top-top shadow height"),supports3D:h&&g.includes("3d")}}}};function a(e){return(e==null?void 0:e.path)??""}return r([l({clonable:!1})],i.prototype,"_functionRasterInfos",void 0),r([l({clonable:!1})],i.prototype,"_rasterJobHandler",void 0),r([l({clonable:!1})],i.prototype,"_cachedRendererJson",void 0),r([l({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),r([q("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),r([l({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),r([l()],i.prototype,"adjustAspectRatio",void 0),r([l({type:[He],json:{write:!0}})],i.prototype,"bandIds",void 0),r([q("bandIds")],i.prototype,"readBandIds",null),r([l({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),r([q("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),r([l({type:Number})],i.prototype,"compressionQuality",void 0),r([T("compressionQuality")],i.prototype,"writeCompressionQuality",null),r([l({type:Number})],i.prototype,"compressionTolerance",void 0),r([T("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),r([l({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),r([l({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),r([q("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),r([l({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),r([l({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),r([l()],i.prototype,"rasterInfo",void 0),r([l({readOnly:!0,type:[ei]})],i.prototype,"fields",void 0),r([l({readOnly:!0})],i.prototype,"fieldsIndex",null),r([l({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],i.prototype,"format",null),r([q("service","format",["serviceDataType"])],i.prototype,"readFormat",null),r([l({type:Le})],i.prototype,"fullExtent",void 0),r([l({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),r([l({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),r([l({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),r([l({type:String,json:{type:Re.jsonValues,read:Re.read,write:Re.write}})],i.prototype,"interpolation",void 0),r([l()],i.prototype,"minScale",void 0),r([q("service","minScale")],i.prototype,"readMinScale",null),r([l()],i.prototype,"maxScale",void 0),r([q("service","maxScale")],i.prototype,"readMaxScale",null),r([l({type:W})],i.prototype,"mosaicRule",null),r([q("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),r([T("mosaicRule")],i.prototype,"writeMosaicRule",null),r([l()],i.prototype,"multidimensionalInfo",void 0),r([l({type:Ni,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),r([l({json:{type:He}})],i.prototype,"noData",void 0),r([T("noData")],i.prototype,"writeNoData",null),r([l({type:String,json:{type:Ue.jsonValues,read:Ue.read,write:Ue.write}})],i.prototype,"noDataInterpretation",void 0),r([l({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),r([q("objectIdField")],i.prototype,"readObjectIdField",null),r([l({readOnly:!0})],i.prototype,"geometryType",void 0),r([l({})],i.prototype,"typeIdField",void 0),r([l({})],i.prototype,"types",void 0),r([l({readOnly:!0})],i.prototype,"parsedUrl",null),r([l({type:Function})],i.prototype,"pixelFilter",void 0),r([l()],i.prototype,"raster",void 0),r([l({readOnly:!0})],i.prototype,"sourceType",void 0),r([q("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),r([l()],i.prototype,"viewId",void 0),r([l()],i.prototype,"renderer",null),r([l({types:Pi,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:_i,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],i.prototype,"internalRenderer",null),r([q("internalRenderer")],i.prototype,"readRenderer",null),r([T("internalRenderer")],i.prototype,"writeRenderer",null),r([l({clonable:!1})],i.prototype,"symbolizer",void 0),r([l(ti)],i.prototype,"opacity",void 0),r([l({readOnly:!0})],i.prototype,"rasterFields",null),r([l({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),r([l({type:F,json:{name:"renderingRule"}})],i.prototype,"rasterFunction",null),r([q("rasterFunction",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRasterFunction",null),r([l({readOnly:!0})],i.prototype,"serviceDataType",void 0),r([l({readOnly:!0,type:re})],i.prototype,"spatialReference",void 0),r([q("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),r([l({json:{type:mt.jsonValues}})],i.prototype,"pixelType",void 0),r([q("pixelType")],i.prototype,"readPixelType",null),r([T("pixelType")],i.prototype,"writePixelType",null),r([l({constructOnly:!0,type:qt})],i.prototype,"serviceRasterInfo",void 0),r([l()],i.prototype,"sourceJSON",void 0),r([l(ii)],i.prototype,"url",void 0),r([l({readOnly:!0})],i.prototype,"version",void 0),r([q("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=r([v("esri.layers.mixins.ArcGISImageService")],i),i};let k=class extends pi(ci(mi(di(yi(pr(Ts(hi(gi(fi(wi(be.ClonableMixin(Ri)))))))))))){constructor(...s){super(...s),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=vi(async(i,a,e)=>{const{save:t,saveAs:n}=await Ti(()=>import("./imageryUtils-8cd0a064.js"),["assets/imageryUtils-8cd0a064.js","assets/utils-5a3862f5.js","assets/index-c2b82012.js","assets/index-c76e6b87.css","assets/originUtils-cfe4feaf.js","assets/multiOriginJSONSupportUtils-c978f4c3.js","assets/saveUtils-54061e79.js"]);switch(i){case ke.SAVE:return t(this,a);case ke.SAVE_AS:return n(this,e,a)}})}normalizeCtorArgs(s,i){return typeof s=="string"?{url:s,...i}:s}load(s){const i=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(bi).then(()=>this._fetchService(i))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(s){this._set("legendEnabled",s)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(s){this._set("listMode",s)}writeOperationalLayerType(s,i,a){var t;const e=((t=this.renderer)==null?void 0:t.type)==="vector-field";i[a]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){var s;return!(!this.raster||!((s=this.url)!=null&&s.toLowerCase().includes("/rasterrendering/imageserver")))}createPopupTemplate(s){var p;const{rasterFields:i}=this,a=new Set,e=Te.itemPixelValue.toLowerCase(),t=this.sourceType==="raster-dataset",n=Xi.toLowerCase(),o=`${Te.servicePixelValue.toLowerCase()}.`;for(const m of i){const c=m.name.toLowerCase();c===e||c.startsWith(o)||t&&c.startsWith(n)||a.add(m.name)}const u=Si({fields:i,title:this.title},{...s,visibleFieldNames:a});return u!=null&&u.fieldInfos&&((p=this.rasterInfo)!=null&&p.pixelType.startsWith("f"))&&u.fieldInfos.forEach(({format:m,fieldName:c})=>{m&&c&&/^raster\.(item|service)pixelvalue/i.test(c)&&(m.places=2)}),u}queryFeatures(s,i){return this.queryRasters(s,i).then(a=>{if(a!=null&&a.features)for(const e of a.features)e.layer=e.sourceLayer=this;return a})}queryFeatureCount(s,i){return this.queryRasterCount(s,i)}redraw(){this.emit("redraw")}async save(s){return this._debouncedSaveOperations(ke.SAVE,s)}async saveAs(s,i){return this._debouncedSaveOperations(ke.SAVE_AS,i,s)}serviceSupportsSpatialReference(s){return xi(this,s)}write(s,i){if(!this._isPreviewLayer)return super.write(s,i);if(i!=null&&i.messages){const a=`${i.origin}/${i.layerContainerType||"operational-layers"}`;i.messages.push(new x("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}};r([l(Ii)],k.prototype,"legendEnabled",null),r([l({type:["show","hide"]})],k.prototype,"listMode",null),r([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],k.prototype,"isReference",void 0),r([l({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],k.prototype,"operationalLayerType",void 0),r([T("web-map","operationalLayerType")],k.prototype,"writeOperationalLayerType",null),r([l(Fi)],k.prototype,"popupEnabled",void 0),r([l({type:Di,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],k.prototype,"popupTemplate",void 0),r([l({readOnly:!0})],k.prototype,"defaultPopupTemplate",null),r([l({readOnly:!0,json:{read:!1}})],k.prototype,"type",void 0),r([l({readOnly:!0})],k.prototype,"_isPreviewLayer",null),k=r([v("esri.layers.ImageryLayer")],k);const dn=k;export{dn as default};
