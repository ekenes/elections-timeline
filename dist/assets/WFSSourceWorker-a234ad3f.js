import{cD as h,d,ak as g,s as p,ck as _,j as f,n as w}from"./index-10102046.js";import{r as F,s as E}from"./featureConversionUtils-1947fb7d.js";import{f as q}from"./FeatureStore-fb72aa54.js";import{j as S,x}from"./projectionSupport-d273ebf8.js";import{i as R}from"./QueryEngine-f7f8defb.js";import{L as k,I as T}from"./geojson-640ee4a0.js";import{d as b}from"./sourceUtils-f448b3c6.js";import{H as I}from"./wfsUtils-6bd3424e.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BoundsStore-e92ff86f.js";import"./PooledRBush-d699d024.js";import"./timeSupport-8e81296f.js";import"./json-48e3ea08.js";import"./WhereClause-0f24bbde.js";import"./TimeOnly-7709534d.js";import"./QueryEngineCapabilities-85c4f1d0.js";import"./quantizationUtils-64099a94.js";import"./utils-ac2051b8.js";import"./generateRendererUtils-5add6e8e.js";import"./xmlUtils-444cb4c0.js";class X{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async e=>{const{objectIdField:t}=this._queryEngine,s=await I(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureSpatialReference,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:e});await k(s,this._getFeatureSpatialReference.wkid),h(e);const n=T(s,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:t});if(!d(this._queryEngine.spatialReference,this._getFeatureSpatialReference))for(const r of n)r.geometry!=null&&(r.geometry=F(S(E(r.geometry,this._queryEngine.geometryType,!1,!1),this._getFeatureSpatialReference,this._queryEngine.spatialReference)));let o=1;for(const r of n){const a={};b(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[t]==null&&(r.objectId=r.attributes[t]=o++)}return n}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=null}async load(e,t){const{getFeatureUrl:s,getFeatureOutputFormat:n,fields:o,geometryType:r,featureType:a,objectIdField:y,customParameters:l}=e,c={wkid:a.defaultSpatialReference},i=e.spatialReference??c,u=i.wkid&&a.supportedSpatialReferences.includes(i.wkid)?{wkid:i.wkid}:{wkid:a.defaultSpatialReference};this._featureType=a,this._customParameters=l,this._getFeatureUrl=s,this._getFeatureOutputFormat=n,this._getFeatureSpatialReference=u,this._fieldsIndex=new g(o);try{await x(u,i)}catch{throw new p("unsupported-projection","Projection not supported",{inSpatialReference:u,outSpatialReference:i})}h(t),this._queryEngine=new R({fields:o,geometryType:r,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:i,timeInfo:null,featureStore:new q({geometryType:r,hasM:!1,hasZ:!1})});const m=await this._snapshotFeatures(t.signal);return this._queryEngine.featureStore.addMany(m),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new p("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var t;return this._customParameters=e,(t=this._snapshotTask)==null||t.abort(),this._snapshotTask=_(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),s&&this._queryEngine.featureStore.addMany(s)},s=>{this._queryEngine.featureStore.clear(),f(s)||w.getLogger("esri.layers.WFSLayer").error(new p("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:s}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}}export{X as default};
