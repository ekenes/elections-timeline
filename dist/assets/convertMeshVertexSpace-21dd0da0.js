import{aa as p,s,aQ as i}from"./index-560772b3.js";import{l as a}from"./MeshVertexAttributes-f8a5dffe.js";import{M as n}from"./vertexSpaceConversion-5f65e6b5.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-c292e74e.js";import"./computeTranslationToOriginAndRotation-ccdd968f.js";import"./meshVertexSpaceUtils-ca27512e.js";import"./MeshLocalVertexSpace-0cd5741a.js";import"./vec3-f374383d.js";import"./projection-d4d25dbb.js";import"./DoubleArray-d69ee1b2.js";import"./BufferView-7aeecc0e.js";import"./vec4-8ac9835b.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=n(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new a({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
