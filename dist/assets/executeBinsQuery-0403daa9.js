import{aC as c,aT as l,eS as y,ai as S,cl as f,ex as o,dm as m,G as R,hl as g,cn as p,C as d}from"./index-09dc31eb.js";function J(a){const t=a.geometry,n=a.toJSON(),e=n;let i,r,s;return t!=null&&(r=t.spatialReference,s=o(r),e.geometryType=m(t),e.geometry=JSON.stringify(t),e.inSR=s),n.outSR?(e.outSR=o(n.outSR),i=a.outSpatialReference):t&&(e.outSR=e.inSR,i=r),e.bin&&(e.bin=JSON.stringify(e.bin)),e.quantizationParameters&&(e.quantizationParameters=JSON.stringify(e.quantizationParameters)),e.outStatistics&&(e.outStatistics=JSON.stringify(e.outStatistics)),e.outTimeReference&&(e.outTimeReference=JSON.stringify(e.outTimeReference)),a.defaultSpatialReference&&R(r,i)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function N(a,t,n){return O(a,t,n)}async function O(a,t,n={}){const e=typeof a=="string"?c(a):a,i=t.geometry?[t.geometry]:[],r=await l(i,null,{signal:n.signal}),s=r==null?void 0:r[0];s!=null&&((t=t.clone()).geometry=s);const u=y({...e.query,f:"json",...J(t)});return S(f(e.path,"queryBins"),{...n,query:{...u,...n.query}})}async function T(a,t,n){const{data:e}=await N(p(a),g.from(t),n);return d.fromJSON(e)}export{T as executeBinsQuery};
