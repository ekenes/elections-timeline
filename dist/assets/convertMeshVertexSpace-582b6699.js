import{a1 as p,s as m,a8 as s}from"./index-c2b82012.js";import{p as a}from"./MeshVertexAttributes-8200cbd6.js";import{B as n}from"./vertexSpaceConversion-af1c76ec.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./spatialReferenceEllipsoidUtils-b06cb7a2.js";import"./computeTranslationToOriginAndRotation-006d6be4.js";import"./projectPointToVector-7df6f554.js";import"./meshVertexSpaceUtils-9f59c7fe.js";import"./MeshLocalVertexSpace-da2d5a3a.js";import"./vec3-77fba0cd.js";import"./BufferView-4428533d.js";import"./vec4-e6da1073.js";async function E(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{E as convertMeshVertexSpace};
