import{bK as y,g as d,b9 as S,R as g,eN as l,a8 as N}from"./index-b8632133.js";import{$ as E}from"./Mesh-62026542.js";import{o as M,i as D}from"./MeshTransform-a1db6c51.js";import{s as F}from"./infoFor3D-24efd44a.js";import{n as T,i as w}from"./meshFeatureAttributes-709fcee4.js";import"./MeshVertexAttributes-aed17032.js";import"./MeshLocalVertexSpace-0737ddbe.js";import"./meshVertexSpaceUtils-cd45f9e9.js";import"./earcut-5a6c70eb.js";import"./DoubleArray-715bf84c.js";import"./Indices-3253d062.js";import"./plane-a919c55a.js";import"./mat3f64-e19cdcb8.js";import"./mat4f64-9a8384aa.js";import"./quatf64-81e039e4.js";import"./deduplicate-ed232a84.js";import"./projection-6554bee2.js";import"./spatialReferenceEllipsoidUtils-017f44f7.js";import"./computeTranslationToOriginAndRotation-614be9a1.js";import"./BufferView-a598cb7c.js";import"./vec3-7d7bc497.js";import"./vec4-fe1290dd.js";import"./projectPointToVector-8bba8dd3.js";import"./vertexSpaceConversion-2cd660e2.js";import"./quat-870db343.js";const I=()=>N.getLogger("esri.rest.support.meshFeatureSet");function ot(t,o,e){const r=e.features;e.features=[],delete e.geometryType;const s=y.fromJSON(e);if(s.geometryType="mesh",!e.assetMaps)return s;const n=O(o,e.assetMaps),i=t.sourceSpatialReference??d.WGS84,m=e.globalIdFieldName,{outFields:a}=t,f=a!=null&&a.length>0?b(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=L(u,m,i,o,n);s.features.push(new S({geometry:p,attributes:f(u)}))}return s}function b(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const e in o)t.has(e)||delete o[e];return o}}function L(t,o,e,r,s){const n=t.attributes[o],i=s.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=g.fromJSON(t.geometry);a.spatialReference=e;const f=w(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=P(i);return p?E.createWithExternalSource(m,p,{extent:a,transform:f,vertexSpace:u}):E.createIncomplete(m,{extent:a,transform:f,vertexSpace:u})}var c;function O(t,o){const e=new Map;for(const r of o){const s=r.parentGlobalId;if(s==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,f=r.conversionStatus,u=r.seqNo,p=F(i,t.supportedFormats);if(!p){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const h=l(e,s,()=>({files:new Map}));l(h.files,n,()=>({name:n,type:i,mimeType:p,status:$(f),parts:[]})).parts[u]={hash:m,url:a}}return e}function P(t){const o=Array.from(t.files.values()),e=new Array;for(const r of o){if(r.status!==c.COMPLETED)return null;const s=new Array;for(const n of r.parts){if(!n)return null;s.push(new M(n.url,n.hash))}e.push(new D(r.name,r.mimeType,s))}return e}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,ot as meshFeatureSetFromJSON};
